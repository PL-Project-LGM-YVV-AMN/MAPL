
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'comma crossProduct dotProduct float int lCurlyBracket lHardBracket minus plus rCurlyBracket rHardBracket vectorexpression : termterm : factor\n            | vector\n            | comma\n            | float\n            | intfactor : lCurlyBracket expression rCurlyBracket\n              | lHardBracket expression rHardBracketexpression : expression plus vector'
    
_lr_action_items = {'vector':([0,8,9,10,],[3,3,3,13,]),'comma':([0,8,9,],[5,5,5,]),'float':([0,8,9,],[6,6,6,]),'int':([0,8,9,],[7,7,7,]),'lCurlyBracket':([0,8,9,],[8,8,8,]),'lHardBracket':([0,8,9,],[9,9,9,]),'$end':([1,2,3,4,5,6,7,13,14,15,],[0,-1,-3,-2,-4,-5,-6,-9,-7,-8,]),'plus':([1,2,3,4,5,6,7,11,12,13,14,15,],[10,-1,-3,-2,-4,-5,-6,10,10,-9,-7,-8,]),'rCurlyBracket':([2,3,4,5,6,7,11,13,14,15,],[-1,-3,-2,-4,-5,-6,14,-9,-7,-8,]),'rHardBracket':([2,3,4,5,6,7,12,13,14,15,],[-1,-3,-2,-4,-5,-6,15,-9,-7,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,8,9,],[1,11,12,]),'term':([0,8,9,],[2,2,2,]),'factor':([0,8,9,],[4,4,4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> term','expression',1,'p_expression_term','yacc_test.py',19),
  ('term -> factor','term',1,'p_term_vector','yacc_test.py',54),
  ('term -> vector','term',1,'p_term_vector','yacc_test.py',55),
  ('term -> comma','term',1,'p_term_vector','yacc_test.py',56),
  ('term -> float','term',1,'p_term_vector','yacc_test.py',57),
  ('term -> int','term',1,'p_term_vector','yacc_test.py',58),
  ('factor -> lCurlyBracket expression rCurlyBracket','factor',3,'p_factor','yacc_test.py',62),
  ('factor -> lHardBracket expression rHardBracket','factor',3,'p_factor','yacc_test.py',63),
  ('expression -> expression plus vector','expression',3,'p_expression_plus_vector','yacc_test.py',70),
]
