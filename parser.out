Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    crossProduct
    dotProduct
    minus

Grammar

Rule 0     S' -> expression
Rule 1     expression -> term
Rule 2     term -> factor
Rule 3     term -> vector
Rule 4     term -> comma
Rule 5     term -> float
Rule 6     term -> int
Rule 7     factor -> lCurlyBracket expression rCurlyBracket
Rule 8     factor -> lHardBracket expression rHardBracket
Rule 9     expression -> expression plus vector

Terminals, with rules where they appear

comma                : 4
crossProduct         : 
dotProduct           : 
error                : 
float                : 5
int                  : 6
lCurlyBracket        : 7
lHardBracket         : 8
minus                : 
plus                 : 9
rCurlyBracket        : 7
rHardBracket         : 8
vector               : 3 9

Nonterminals, with rules where they appear

expression           : 7 8 9 0
factor               : 2
term                 : 1

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . term
    (9) expression -> . expression plus vector
    (2) term -> . factor
    (3) term -> . vector
    (4) term -> . comma
    (5) term -> . float
    (6) term -> . int
    (7) factor -> . lCurlyBracket expression rCurlyBracket
    (8) factor -> . lHardBracket expression rHardBracket

    vector          shift and go to state 3
    comma           shift and go to state 5
    float           shift and go to state 6
    int             shift and go to state 7
    lCurlyBracket   shift and go to state 8
    lHardBracket    shift and go to state 9

    expression                     shift and go to state 1
    term                           shift and go to state 2
    factor                         shift and go to state 4

state 1

    (0) S' -> expression .
    (9) expression -> expression . plus vector

    plus            shift and go to state 10


state 2

    (1) expression -> term .

    plus            reduce using rule 1 (expression -> term .)
    $end            reduce using rule 1 (expression -> term .)
    rCurlyBracket   reduce using rule 1 (expression -> term .)
    rHardBracket    reduce using rule 1 (expression -> term .)


state 3

    (3) term -> vector .

    plus            reduce using rule 3 (term -> vector .)
    $end            reduce using rule 3 (term -> vector .)
    rCurlyBracket   reduce using rule 3 (term -> vector .)
    rHardBracket    reduce using rule 3 (term -> vector .)


state 4

    (2) term -> factor .

    plus            reduce using rule 2 (term -> factor .)
    $end            reduce using rule 2 (term -> factor .)
    rCurlyBracket   reduce using rule 2 (term -> factor .)
    rHardBracket    reduce using rule 2 (term -> factor .)


state 5

    (4) term -> comma .

    plus            reduce using rule 4 (term -> comma .)
    $end            reduce using rule 4 (term -> comma .)
    rCurlyBracket   reduce using rule 4 (term -> comma .)
    rHardBracket    reduce using rule 4 (term -> comma .)


state 6

    (5) term -> float .

    plus            reduce using rule 5 (term -> float .)
    $end            reduce using rule 5 (term -> float .)
    rCurlyBracket   reduce using rule 5 (term -> float .)
    rHardBracket    reduce using rule 5 (term -> float .)


state 7

    (6) term -> int .

    plus            reduce using rule 6 (term -> int .)
    $end            reduce using rule 6 (term -> int .)
    rCurlyBracket   reduce using rule 6 (term -> int .)
    rHardBracket    reduce using rule 6 (term -> int .)


state 8

    (7) factor -> lCurlyBracket . expression rCurlyBracket
    (1) expression -> . term
    (9) expression -> . expression plus vector
    (2) term -> . factor
    (3) term -> . vector
    (4) term -> . comma
    (5) term -> . float
    (6) term -> . int
    (7) factor -> . lCurlyBracket expression rCurlyBracket
    (8) factor -> . lHardBracket expression rHardBracket

    vector          shift and go to state 3
    comma           shift and go to state 5
    float           shift and go to state 6
    int             shift and go to state 7
    lCurlyBracket   shift and go to state 8
    lHardBracket    shift and go to state 9

    expression                     shift and go to state 11
    term                           shift and go to state 2
    factor                         shift and go to state 4

state 9

    (8) factor -> lHardBracket . expression rHardBracket
    (1) expression -> . term
    (9) expression -> . expression plus vector
    (2) term -> . factor
    (3) term -> . vector
    (4) term -> . comma
    (5) term -> . float
    (6) term -> . int
    (7) factor -> . lCurlyBracket expression rCurlyBracket
    (8) factor -> . lHardBracket expression rHardBracket

    vector          shift and go to state 3
    comma           shift and go to state 5
    float           shift and go to state 6
    int             shift and go to state 7
    lCurlyBracket   shift and go to state 8
    lHardBracket    shift and go to state 9

    expression                     shift and go to state 12
    term                           shift and go to state 2
    factor                         shift and go to state 4

state 10

    (9) expression -> expression plus . vector

    vector          shift and go to state 13


state 11

    (7) factor -> lCurlyBracket expression . rCurlyBracket
    (9) expression -> expression . plus vector

    rCurlyBracket   shift and go to state 14
    plus            shift and go to state 10


state 12

    (8) factor -> lHardBracket expression . rHardBracket
    (9) expression -> expression . plus vector

    rHardBracket    shift and go to state 15
    plus            shift and go to state 10


state 13

    (9) expression -> expression plus vector .

    plus            reduce using rule 9 (expression -> expression plus vector .)
    $end            reduce using rule 9 (expression -> expression plus vector .)
    rCurlyBracket   reduce using rule 9 (expression -> expression plus vector .)
    rHardBracket    reduce using rule 9 (expression -> expression plus vector .)


state 14

    (7) factor -> lCurlyBracket expression rCurlyBracket .

    plus            reduce using rule 7 (factor -> lCurlyBracket expression rCurlyBracket .)
    $end            reduce using rule 7 (factor -> lCurlyBracket expression rCurlyBracket .)
    rCurlyBracket   reduce using rule 7 (factor -> lCurlyBracket expression rCurlyBracket .)
    rHardBracket    reduce using rule 7 (factor -> lCurlyBracket expression rCurlyBracket .)


state 15

    (8) factor -> lHardBracket expression rHardBracket .

    plus            reduce using rule 8 (factor -> lHardBracket expression rHardBracket .)
    $end            reduce using rule 8 (factor -> lHardBracket expression rHardBracket .)
    rCurlyBracket   reduce using rule 8 (factor -> lHardBracket expression rHardBracket .)
    rHardBracket    reduce using rule 8 (factor -> lHardBracket expression rHardBracket .)

