None on class matrix in module matrixClass:

class matrix(builtins.object)
 |  matrix(string: str) -> 'matrix'
 |  
 |  **A class used to represent a matrix**
 |  
 |  Attributes
 |  ----------
 |  numOfRows : int
 |      the number of vectors found in the string 
 |  RowVecs : list
 |      a list of vector objects created from the string
 |  size : int
 |      the amount of elements in the matrix 
 |  numOfColumns : int
 |      the number of columns in the matrix
 |  ColumnVecs : list
 |      a list of vector objects created from RowVecs
 |  isSqaure : bool
 |      is true if the matrix has a sqaure number of elements, else false
 |  
 |  Methods
 |  -------
 |  scalar_multiplication(multiplier)
 |      Returns a matrix object containing the the elements 
 |      of self scalar multiplied
 |  
 |  cross_product(rightMat)
 |      Returns a matrix object containing the the elements 
 |      of self cross multiplied with the elements of rightMat
 |  
 |  tanspose()
 |      Returns a matrix object containing the the elements 
 |      of self cross multiplied with the elements of rightMat
 |  
 |  tanspose()
 |      Returns a matrix object containing the the elements 
 |      of self transposed
 |  
 |  det()
 |      Returns the determinant of self
 |  
 |  inv()
 |      Returns a matrix object containing the inverse of self
 |  
 |  adjugate()
 |      Returns a matrix object containing the adjugate of self
 |  
 |  Methods defined here:
 |  
 |  __add__(self, RightMatrix: 'matrix') -> 'matrix'
 |      returns a matrix object containing the sum of self and RightMatrix
 |      Parameters
 |      ----------
 |      RightMatrix : matrix
 |          must be of the same size as self
 |  
 |  __init__(self, string: str) -> 'matrix'
 |      Parameters
 |      ----------
 |      string : str
 |          needs to be compliant with matrix regex from in lexer.py as t_matrix
 |  
 |  __inv_and_adjugate__(self, det: float) -> 'matrix'
 |      returns a matrix object that can produce the star matrix
 |      divided by det
 |      Parameters
 |      ----------
 |      det : float
 |          what the star matrix is divided by by
 |  
 |  __str__(self) -> str
 |      returns the row vectors formatted to be compliant with matrix regex
 |  
 |  __sub__(self, RightMatrix: 'matrix') -> 'matrix'
 |      returns a matrix object containing the difference of self and RightMatrix
 |      Parameters
 |      ----------
 |      RightMatrix : matrix
 |          must be of the same size as self
 |  
 |  adjugate(self) -> 'matrix'
 |      returns a matrix object that is the adjugate of self
 |  
 |  cross_product(self, rightMat: 'matrix') -> 'matrix'
 |      **returns a matrix object containing the cross product with rightMat.**
 |      
 |      rightMat.numOfRows must equal to self.numOfColumns for the operation to be performed
 |      otherwise None will be returned
 |      Parameters
 |      ----------
 |      rightMat : matrix
 |          numOfRows must equal to self.numOfColumns for the operation to be performed
 |  
 |  det(self) -> float
 |      returns the determinant of self as a float value
 |  
 |  inv(self) -> 'matrix'
 |      returns a matrix object containing the inv of self
 |  
 |  scalar_multiplication(self, multiplier: float) -> 'matrix'
 |      returns a matrix object containing the elements of self
 |      scalar multiplied by a factor by multiplier
 |      Parameters
 |      ----------
 |      multiplier : float
 |          the value by which the matrix will be multiplied by
 |  
 |  transpose(self) -> 'matrix'
 |      returns a matrix object that contains the elements of self transposed
 |      i.e the rows become columns and columns become rows
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  FormatColumnVectors(string: str) -> str
 |      removes commas and single quotes from string
 |      Parameters
 |      ----------
 |      string : str
 |          must be a the string of a list containing strings
 |  
 |  appendZeroes(vec: list, initialSize: int, maxColumnSize: int) -> list
 |      add the difference of maxColumnSize and initialSize of zeroes to vec
 |      Parameters
 |      ----------
 |      vec : list
 |          the list you wish to add zeroes to
 |      initialSize : int
 |          the initial length of vec
 |      maxColumnSize : int
 |          the size you wish to compare with initialSize
 |  
 |  formatList(vecList: list) -> list
 |  
 |  not_in_row_or_column(mat: list, size: int, target_row: int, target_column: int) -> list
 |      returns a list of lists containing float values of all the
 |      values that are not in the position target row and target column
 |      also called the co-factors of a position
 |      Parameters
 |      ----------
 |      mat : list
 |          is a list of lists containing float values
 |      size : int
 |          is the length of mat
 |      target_row : int
 |          the row that element you want to find the co-factors of
 |      target_column : int
 |          the column that element you want to find the co-factors of
 |  
 |  rec_det(mat) -> float
 |      returns the determinant of a list of lists containing float values
 |  
 |  star(mat: list) -> list
 |      returns a list of lists of floats containing
 |      the star transformation of mat
 |      
 |      **is a helper function**
 |      Parameters
 |      ----------
 |      mat : list
 |          returns a list of lists of floats containing the row vectors 
 |          of a square matrix
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  VectorRule = re.compile('\\[(?:\\s*(?:-?\\d+\\.\\d+|-?\\d+)\\s*)+\\]')