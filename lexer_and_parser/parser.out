Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    crossProduct

Grammar

Rule 0     S' -> assignment
Rule 1     assignment -> identifier EQUALS term
Rule 2     expression -> term
Rule 3     term -> factor
Rule 4     term -> vector
Rule 5     term -> comma
Rule 6     term -> float
Rule 7     term -> int
Rule 8     term -> matrix
Rule 9     term -> multiplier
Rule 10    factor -> lCurlyBracket expression rCurlyBracket
Rule 11    factor -> lHardBracket expression rHardBracket
Rule 12    expression -> expression plus vector
Rule 13    expression -> expression minus vector
Rule 14    expression -> expression plus matrix
Rule 15    expression -> expression minus matrix
Rule 16    expression -> multiplier vector
Rule 17    expression -> multiplier matrix
Rule 18    expression -> matrix matrix
Rule 19    expression -> transpose matrix
Rule 20    expression -> determinant matrix
Rule 21    expression -> vector dotProduct vector
Rule 22    expression -> inverse matrix
Rule 23    expression -> adjugate matrix
Rule 24    term -> identifier

Terminals, with rules where they appear

EQUALS               : 1
adjugate             : 23
comma                : 5
crossProduct         : 
determinant          : 20
dotProduct           : 21
error                : 
float                : 6
identifier           : 1 24
int                  : 7
inverse              : 22
lCurlyBracket        : 10
lHardBracket         : 11
matrix               : 8 14 15 17 18 18 19 20 22 23
minus                : 13 15
multiplier           : 9 16 17
plus                 : 12 14
rCurlyBracket        : 10
rHardBracket         : 11
transpose            : 19
vector               : 4 12 13 16 21 21

Nonterminals, with rules where they appear

assignment           : 0
expression           : 10 11 12 13 14 15
factor               : 3
term                 : 1 2

Parsing method: LALR

state 0

    (0) S' -> . assignment
    (1) assignment -> . identifier EQUALS term

    identifier      shift and go to state 2

    assignment                     shift and go to state 1

state 1

    (0) S' -> assignment .



state 2

    (1) assignment -> identifier . EQUALS term

    EQUALS          shift and go to state 3


state 3

    (1) assignment -> identifier EQUALS . term
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (24) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    vector          shift and go to state 7
    comma           shift and go to state 8
    float           shift and go to state 9
    int             shift and go to state 10
    matrix          shift and go to state 11
    multiplier      shift and go to state 12
    identifier      shift and go to state 4
    lCurlyBracket   shift and go to state 13
    lHardBracket    shift and go to state 14

    term                           shift and go to state 5
    factor                         shift and go to state 6

state 4

    (24) term -> identifier .

    $end            reduce using rule 24 (term -> identifier .)
    rCurlyBracket   reduce using rule 24 (term -> identifier .)
    plus            reduce using rule 24 (term -> identifier .)
    minus           reduce using rule 24 (term -> identifier .)
    rHardBracket    reduce using rule 24 (term -> identifier .)


state 5

    (1) assignment -> identifier EQUALS term .

    $end            reduce using rule 1 (assignment -> identifier EQUALS term .)


state 6

    (3) term -> factor .

    $end            reduce using rule 3 (term -> factor .)
    rCurlyBracket   reduce using rule 3 (term -> factor .)
    plus            reduce using rule 3 (term -> factor .)
    minus           reduce using rule 3 (term -> factor .)
    rHardBracket    reduce using rule 3 (term -> factor .)


state 7

    (4) term -> vector .

    $end            reduce using rule 4 (term -> vector .)


state 8

    (5) term -> comma .

    $end            reduce using rule 5 (term -> comma .)
    rCurlyBracket   reduce using rule 5 (term -> comma .)
    plus            reduce using rule 5 (term -> comma .)
    minus           reduce using rule 5 (term -> comma .)
    rHardBracket    reduce using rule 5 (term -> comma .)


state 9

    (6) term -> float .

    $end            reduce using rule 6 (term -> float .)
    rCurlyBracket   reduce using rule 6 (term -> float .)
    plus            reduce using rule 6 (term -> float .)
    minus           reduce using rule 6 (term -> float .)
    rHardBracket    reduce using rule 6 (term -> float .)


state 10

    (7) term -> int .

    $end            reduce using rule 7 (term -> int .)
    rCurlyBracket   reduce using rule 7 (term -> int .)
    plus            reduce using rule 7 (term -> int .)
    minus           reduce using rule 7 (term -> int .)
    rHardBracket    reduce using rule 7 (term -> int .)


state 11

    (8) term -> matrix .

    $end            reduce using rule 8 (term -> matrix .)


state 12

    (9) term -> multiplier .

    $end            reduce using rule 9 (term -> multiplier .)


state 13

    (10) factor -> lCurlyBracket . expression rCurlyBracket
    (2) expression -> . term
    (12) expression -> . expression plus vector
    (13) expression -> . expression minus vector
    (14) expression -> . expression plus matrix
    (15) expression -> . expression minus matrix
    (16) expression -> . multiplier vector
    (17) expression -> . multiplier matrix
    (18) expression -> . matrix matrix
    (19) expression -> . transpose matrix
    (20) expression -> . determinant matrix
    (21) expression -> . vector dotProduct vector
    (22) expression -> . inverse matrix
    (23) expression -> . adjugate matrix
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (24) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    multiplier      shift and go to state 19
    matrix          shift and go to state 18
    transpose       shift and go to state 20
    determinant     shift and go to state 21
    vector          shift and go to state 17
    inverse         shift and go to state 22
    adjugate        shift and go to state 23
    comma           shift and go to state 8
    float           shift and go to state 9
    int             shift and go to state 10
    identifier      shift and go to state 4
    lCurlyBracket   shift and go to state 13
    lHardBracket    shift and go to state 14

    expression                     shift and go to state 15
    term                           shift and go to state 16
    factor                         shift and go to state 6

state 14

    (11) factor -> lHardBracket . expression rHardBracket
    (2) expression -> . term
    (12) expression -> . expression plus vector
    (13) expression -> . expression minus vector
    (14) expression -> . expression plus matrix
    (15) expression -> . expression minus matrix
    (16) expression -> . multiplier vector
    (17) expression -> . multiplier matrix
    (18) expression -> . matrix matrix
    (19) expression -> . transpose matrix
    (20) expression -> . determinant matrix
    (21) expression -> . vector dotProduct vector
    (22) expression -> . inverse matrix
    (23) expression -> . adjugate matrix
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (24) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    multiplier      shift and go to state 19
    matrix          shift and go to state 18
    transpose       shift and go to state 20
    determinant     shift and go to state 21
    vector          shift and go to state 17
    inverse         shift and go to state 22
    adjugate        shift and go to state 23
    comma           shift and go to state 8
    float           shift and go to state 9
    int             shift and go to state 10
    identifier      shift and go to state 4
    lCurlyBracket   shift and go to state 13
    lHardBracket    shift and go to state 14

    expression                     shift and go to state 24
    term                           shift and go to state 16
    factor                         shift and go to state 6

state 15

    (10) factor -> lCurlyBracket expression . rCurlyBracket
    (12) expression -> expression . plus vector
    (13) expression -> expression . minus vector
    (14) expression -> expression . plus matrix
    (15) expression -> expression . minus matrix

    rCurlyBracket   shift and go to state 25
    plus            shift and go to state 26
    minus           shift and go to state 27


state 16

    (2) expression -> term .

    rCurlyBracket   reduce using rule 2 (expression -> term .)
    plus            reduce using rule 2 (expression -> term .)
    minus           reduce using rule 2 (expression -> term .)
    rHardBracket    reduce using rule 2 (expression -> term .)


state 17

    (21) expression -> vector . dotProduct vector
    (4) term -> vector .

    dotProduct      shift and go to state 28
    rCurlyBracket   reduce using rule 4 (term -> vector .)
    plus            reduce using rule 4 (term -> vector .)
    minus           reduce using rule 4 (term -> vector .)
    rHardBracket    reduce using rule 4 (term -> vector .)


state 18

    (18) expression -> matrix . matrix
    (8) term -> matrix .

    matrix          shift and go to state 29
    rCurlyBracket   reduce using rule 8 (term -> matrix .)
    plus            reduce using rule 8 (term -> matrix .)
    minus           reduce using rule 8 (term -> matrix .)
    rHardBracket    reduce using rule 8 (term -> matrix .)


state 19

    (16) expression -> multiplier . vector
    (17) expression -> multiplier . matrix
    (9) term -> multiplier .

    vector          shift and go to state 30
    matrix          shift and go to state 31
    rCurlyBracket   reduce using rule 9 (term -> multiplier .)
    plus            reduce using rule 9 (term -> multiplier .)
    minus           reduce using rule 9 (term -> multiplier .)
    rHardBracket    reduce using rule 9 (term -> multiplier .)


state 20

    (19) expression -> transpose . matrix

    matrix          shift and go to state 32


state 21

    (20) expression -> determinant . matrix

    matrix          shift and go to state 33


state 22

    (22) expression -> inverse . matrix

    matrix          shift and go to state 34


state 23

    (23) expression -> adjugate . matrix

    matrix          shift and go to state 35


state 24

    (11) factor -> lHardBracket expression . rHardBracket
    (12) expression -> expression . plus vector
    (13) expression -> expression . minus vector
    (14) expression -> expression . plus matrix
    (15) expression -> expression . minus matrix

    rHardBracket    shift and go to state 36
    plus            shift and go to state 26
    minus           shift and go to state 27


state 25

    (10) factor -> lCurlyBracket expression rCurlyBracket .

    $end            reduce using rule 10 (factor -> lCurlyBracket expression rCurlyBracket .)
    rCurlyBracket   reduce using rule 10 (factor -> lCurlyBracket expression rCurlyBracket .)
    plus            reduce using rule 10 (factor -> lCurlyBracket expression rCurlyBracket .)
    minus           reduce using rule 10 (factor -> lCurlyBracket expression rCurlyBracket .)
    rHardBracket    reduce using rule 10 (factor -> lCurlyBracket expression rCurlyBracket .)


state 26

    (12) expression -> expression plus . vector
    (14) expression -> expression plus . matrix

    vector          shift and go to state 37
    matrix          shift and go to state 38


state 27

    (13) expression -> expression minus . vector
    (15) expression -> expression minus . matrix

    vector          shift and go to state 39
    matrix          shift and go to state 40


state 28

    (21) expression -> vector dotProduct . vector

    vector          shift and go to state 41


state 29

    (18) expression -> matrix matrix .

    rCurlyBracket   reduce using rule 18 (expression -> matrix matrix .)
    plus            reduce using rule 18 (expression -> matrix matrix .)
    minus           reduce using rule 18 (expression -> matrix matrix .)
    rHardBracket    reduce using rule 18 (expression -> matrix matrix .)


state 30

    (16) expression -> multiplier vector .

    rCurlyBracket   reduce using rule 16 (expression -> multiplier vector .)
    plus            reduce using rule 16 (expression -> multiplier vector .)
    minus           reduce using rule 16 (expression -> multiplier vector .)
    rHardBracket    reduce using rule 16 (expression -> multiplier vector .)


state 31

    (17) expression -> multiplier matrix .

    rCurlyBracket   reduce using rule 17 (expression -> multiplier matrix .)
    plus            reduce using rule 17 (expression -> multiplier matrix .)
    minus           reduce using rule 17 (expression -> multiplier matrix .)
    rHardBracket    reduce using rule 17 (expression -> multiplier matrix .)


state 32

    (19) expression -> transpose matrix .

    rCurlyBracket   reduce using rule 19 (expression -> transpose matrix .)
    plus            reduce using rule 19 (expression -> transpose matrix .)
    minus           reduce using rule 19 (expression -> transpose matrix .)
    rHardBracket    reduce using rule 19 (expression -> transpose matrix .)


state 33

    (20) expression -> determinant matrix .

    rCurlyBracket   reduce using rule 20 (expression -> determinant matrix .)
    plus            reduce using rule 20 (expression -> determinant matrix .)
    minus           reduce using rule 20 (expression -> determinant matrix .)
    rHardBracket    reduce using rule 20 (expression -> determinant matrix .)


state 34

    (22) expression -> inverse matrix .

    rCurlyBracket   reduce using rule 22 (expression -> inverse matrix .)
    plus            reduce using rule 22 (expression -> inverse matrix .)
    minus           reduce using rule 22 (expression -> inverse matrix .)
    rHardBracket    reduce using rule 22 (expression -> inverse matrix .)


state 35

    (23) expression -> adjugate matrix .

    rCurlyBracket   reduce using rule 23 (expression -> adjugate matrix .)
    plus            reduce using rule 23 (expression -> adjugate matrix .)
    minus           reduce using rule 23 (expression -> adjugate matrix .)
    rHardBracket    reduce using rule 23 (expression -> adjugate matrix .)


state 36

    (11) factor -> lHardBracket expression rHardBracket .

    $end            reduce using rule 11 (factor -> lHardBracket expression rHardBracket .)
    rCurlyBracket   reduce using rule 11 (factor -> lHardBracket expression rHardBracket .)
    plus            reduce using rule 11 (factor -> lHardBracket expression rHardBracket .)
    minus           reduce using rule 11 (factor -> lHardBracket expression rHardBracket .)
    rHardBracket    reduce using rule 11 (factor -> lHardBracket expression rHardBracket .)


state 37

    (12) expression -> expression plus vector .

    rCurlyBracket   reduce using rule 12 (expression -> expression plus vector .)
    plus            reduce using rule 12 (expression -> expression plus vector .)
    minus           reduce using rule 12 (expression -> expression plus vector .)
    rHardBracket    reduce using rule 12 (expression -> expression plus vector .)


state 38

    (14) expression -> expression plus matrix .

    rCurlyBracket   reduce using rule 14 (expression -> expression plus matrix .)
    plus            reduce using rule 14 (expression -> expression plus matrix .)
    minus           reduce using rule 14 (expression -> expression plus matrix .)
    rHardBracket    reduce using rule 14 (expression -> expression plus matrix .)


state 39

    (13) expression -> expression minus vector .

    rCurlyBracket   reduce using rule 13 (expression -> expression minus vector .)
    plus            reduce using rule 13 (expression -> expression minus vector .)
    minus           reduce using rule 13 (expression -> expression minus vector .)
    rHardBracket    reduce using rule 13 (expression -> expression minus vector .)


state 40

    (15) expression -> expression minus matrix .

    rCurlyBracket   reduce using rule 15 (expression -> expression minus matrix .)
    plus            reduce using rule 15 (expression -> expression minus matrix .)
    minus           reduce using rule 15 (expression -> expression minus matrix .)
    rHardBracket    reduce using rule 15 (expression -> expression minus matrix .)


state 41

    (21) expression -> vector dotProduct vector .

    rCurlyBracket   reduce using rule 21 (expression -> vector dotProduct vector .)
    plus            reduce using rule 21 (expression -> vector dotProduct vector .)
    minus           reduce using rule 21 (expression -> vector dotProduct vector .)
    rHardBracket    reduce using rule 21 (expression -> vector dotProduct vector .)

