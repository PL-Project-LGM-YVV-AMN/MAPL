Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> identifier EQUALS expression
Rule 2     expression -> term
Rule 3     term -> factor
Rule 4     term -> vector
Rule 5     term -> comma
Rule 6     term -> float
Rule 7     term -> int
Rule 8     term -> matrix
Rule 9     term -> multiplier
Rule 10    factor -> lCurlyBracket expression rCurlyBracket
Rule 11    factor -> lHardBracket expression rHardBracket
Rule 12    expression -> expression plus expression
Rule 13    expression -> expression minus expression
Rule 14    expression -> expression dotProduct expression
Rule 15    expression -> multiplier expression
Rule 16    expression -> expression crossProduct expression
Rule 17    expression -> transpose expression
Rule 18    expression -> determinant expression determinant
Rule 19    expression -> inverse expression
Rule 20    expression -> adjugate expression
Rule 21    term -> identifier
Rule 22    expression -> PRINT expression

Terminals, with rules where they appear

EQUALS               : 1
PRINT                : 22
adjugate             : 20
comma                : 5
crossProduct         : 16
determinant          : 18 18
dotProduct           : 14
error                : 
float                : 6
identifier           : 1 21
int                  : 7
inverse              : 19
lCurlyBracket        : 10
lHardBracket         : 11
matrix               : 8
minus                : 13
multiplier           : 9 15
plus                 : 12
rCurlyBracket        : 10
rHardBracket         : 11
transpose            : 17
vector               : 4

Nonterminals, with rules where they appear

expression           : 1 10 11 12 12 13 13 14 14 15 16 16 17 18 19 20 22 0
factor               : 3
term                 : 2

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . identifier EQUALS expression
    (2) expression -> . term
    (12) expression -> . expression plus expression
    (13) expression -> . expression minus expression
    (14) expression -> . expression dotProduct expression
    (15) expression -> . multiplier expression
    (16) expression -> . expression crossProduct expression
    (17) expression -> . transpose expression
    (18) expression -> . determinant expression determinant
    (19) expression -> . inverse expression
    (20) expression -> . adjugate expression
    (22) expression -> . PRINT expression
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (21) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    identifier      shift and go to state 2
    multiplier      shift and go to state 4
    transpose       shift and go to state 5
    determinant     shift and go to state 6
    inverse         shift and go to state 7
    adjugate        shift and go to state 8
    PRINT           shift and go to state 9
    vector          shift and go to state 11
    comma           shift and go to state 12
    float           shift and go to state 13
    int             shift and go to state 14
    matrix          shift and go to state 15
    lCurlyBracket   shift and go to state 16
    lHardBracket    shift and go to state 17

    expression                     shift and go to state 1
    term                           shift and go to state 3
    factor                         shift and go to state 10

state 1

    (0) S' -> expression .
    (12) expression -> expression . plus expression
    (13) expression -> expression . minus expression
    (14) expression -> expression . dotProduct expression
    (16) expression -> expression . crossProduct expression

    plus            shift and go to state 18
    minus           shift and go to state 19
    dotProduct      shift and go to state 20
    crossProduct    shift and go to state 21


state 2

    (1) expression -> identifier . EQUALS expression
    (21) term -> identifier .

    EQUALS          shift and go to state 22
    plus            reduce using rule 21 (term -> identifier .)
    minus           reduce using rule 21 (term -> identifier .)
    dotProduct      reduce using rule 21 (term -> identifier .)
    crossProduct    reduce using rule 21 (term -> identifier .)
    $end            reduce using rule 21 (term -> identifier .)
    determinant     reduce using rule 21 (term -> identifier .)
    rCurlyBracket   reduce using rule 21 (term -> identifier .)
    rHardBracket    reduce using rule 21 (term -> identifier .)


state 3

    (2) expression -> term .

    plus            reduce using rule 2 (expression -> term .)
    minus           reduce using rule 2 (expression -> term .)
    dotProduct      reduce using rule 2 (expression -> term .)
    crossProduct    reduce using rule 2 (expression -> term .)
    $end            reduce using rule 2 (expression -> term .)
    determinant     reduce using rule 2 (expression -> term .)
    rCurlyBracket   reduce using rule 2 (expression -> term .)
    rHardBracket    reduce using rule 2 (expression -> term .)


state 4

    (15) expression -> multiplier . expression
    (9) term -> multiplier .
    (1) expression -> . identifier EQUALS expression
    (2) expression -> . term
    (12) expression -> . expression plus expression
    (13) expression -> . expression minus expression
    (14) expression -> . expression dotProduct expression
    (15) expression -> . multiplier expression
    (16) expression -> . expression crossProduct expression
    (17) expression -> . transpose expression
    (18) expression -> . determinant expression determinant
    (19) expression -> . inverse expression
    (20) expression -> . adjugate expression
    (22) expression -> . PRINT expression
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (21) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    plus            reduce using rule 9 (term -> multiplier .)
    minus           reduce using rule 9 (term -> multiplier .)
    dotProduct      reduce using rule 9 (term -> multiplier .)
    crossProduct    reduce using rule 9 (term -> multiplier .)
    $end            reduce using rule 9 (term -> multiplier .)
    rCurlyBracket   reduce using rule 9 (term -> multiplier .)
    rHardBracket    reduce using rule 9 (term -> multiplier .)
    identifier      shift and go to state 2
    multiplier      shift and go to state 4
    transpose       shift and go to state 5
    determinant     shift and go to state 6
    inverse         shift and go to state 7
    adjugate        shift and go to state 8
    PRINT           shift and go to state 9
    vector          shift and go to state 11
    comma           shift and go to state 12
    float           shift and go to state 13
    int             shift and go to state 14
    matrix          shift and go to state 15
    lCurlyBracket   shift and go to state 16
    lHardBracket    shift and go to state 17

  ! determinant     [ reduce using rule 9 (term -> multiplier .) ]

    expression                     shift and go to state 23
    term                           shift and go to state 3
    factor                         shift and go to state 10

state 5

    (17) expression -> transpose . expression
    (1) expression -> . identifier EQUALS expression
    (2) expression -> . term
    (12) expression -> . expression plus expression
    (13) expression -> . expression minus expression
    (14) expression -> . expression dotProduct expression
    (15) expression -> . multiplier expression
    (16) expression -> . expression crossProduct expression
    (17) expression -> . transpose expression
    (18) expression -> . determinant expression determinant
    (19) expression -> . inverse expression
    (20) expression -> . adjugate expression
    (22) expression -> . PRINT expression
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (21) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    identifier      shift and go to state 2
    multiplier      shift and go to state 4
    transpose       shift and go to state 5
    determinant     shift and go to state 6
    inverse         shift and go to state 7
    adjugate        shift and go to state 8
    PRINT           shift and go to state 9
    vector          shift and go to state 11
    comma           shift and go to state 12
    float           shift and go to state 13
    int             shift and go to state 14
    matrix          shift and go to state 15
    lCurlyBracket   shift and go to state 16
    lHardBracket    shift and go to state 17

    expression                     shift and go to state 24
    term                           shift and go to state 3
    factor                         shift and go to state 10

state 6

    (18) expression -> determinant . expression determinant
    (1) expression -> . identifier EQUALS expression
    (2) expression -> . term
    (12) expression -> . expression plus expression
    (13) expression -> . expression minus expression
    (14) expression -> . expression dotProduct expression
    (15) expression -> . multiplier expression
    (16) expression -> . expression crossProduct expression
    (17) expression -> . transpose expression
    (18) expression -> . determinant expression determinant
    (19) expression -> . inverse expression
    (20) expression -> . adjugate expression
    (22) expression -> . PRINT expression
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (21) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    identifier      shift and go to state 2
    multiplier      shift and go to state 4
    transpose       shift and go to state 5
    determinant     shift and go to state 6
    inverse         shift and go to state 7
    adjugate        shift and go to state 8
    PRINT           shift and go to state 9
    vector          shift and go to state 11
    comma           shift and go to state 12
    float           shift and go to state 13
    int             shift and go to state 14
    matrix          shift and go to state 15
    lCurlyBracket   shift and go to state 16
    lHardBracket    shift and go to state 17

    expression                     shift and go to state 25
    term                           shift and go to state 3
    factor                         shift and go to state 10

state 7

    (19) expression -> inverse . expression
    (1) expression -> . identifier EQUALS expression
    (2) expression -> . term
    (12) expression -> . expression plus expression
    (13) expression -> . expression minus expression
    (14) expression -> . expression dotProduct expression
    (15) expression -> . multiplier expression
    (16) expression -> . expression crossProduct expression
    (17) expression -> . transpose expression
    (18) expression -> . determinant expression determinant
    (19) expression -> . inverse expression
    (20) expression -> . adjugate expression
    (22) expression -> . PRINT expression
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (21) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    identifier      shift and go to state 2
    multiplier      shift and go to state 4
    transpose       shift and go to state 5
    determinant     shift and go to state 6
    inverse         shift and go to state 7
    adjugate        shift and go to state 8
    PRINT           shift and go to state 9
    vector          shift and go to state 11
    comma           shift and go to state 12
    float           shift and go to state 13
    int             shift and go to state 14
    matrix          shift and go to state 15
    lCurlyBracket   shift and go to state 16
    lHardBracket    shift and go to state 17

    expression                     shift and go to state 26
    term                           shift and go to state 3
    factor                         shift and go to state 10

state 8

    (20) expression -> adjugate . expression
    (1) expression -> . identifier EQUALS expression
    (2) expression -> . term
    (12) expression -> . expression plus expression
    (13) expression -> . expression minus expression
    (14) expression -> . expression dotProduct expression
    (15) expression -> . multiplier expression
    (16) expression -> . expression crossProduct expression
    (17) expression -> . transpose expression
    (18) expression -> . determinant expression determinant
    (19) expression -> . inverse expression
    (20) expression -> . adjugate expression
    (22) expression -> . PRINT expression
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (21) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    identifier      shift and go to state 2
    multiplier      shift and go to state 4
    transpose       shift and go to state 5
    determinant     shift and go to state 6
    inverse         shift and go to state 7
    adjugate        shift and go to state 8
    PRINT           shift and go to state 9
    vector          shift and go to state 11
    comma           shift and go to state 12
    float           shift and go to state 13
    int             shift and go to state 14
    matrix          shift and go to state 15
    lCurlyBracket   shift and go to state 16
    lHardBracket    shift and go to state 17

    expression                     shift and go to state 27
    term                           shift and go to state 3
    factor                         shift and go to state 10

state 9

    (22) expression -> PRINT . expression
    (1) expression -> . identifier EQUALS expression
    (2) expression -> . term
    (12) expression -> . expression plus expression
    (13) expression -> . expression minus expression
    (14) expression -> . expression dotProduct expression
    (15) expression -> . multiplier expression
    (16) expression -> . expression crossProduct expression
    (17) expression -> . transpose expression
    (18) expression -> . determinant expression determinant
    (19) expression -> . inverse expression
    (20) expression -> . adjugate expression
    (22) expression -> . PRINT expression
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (21) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    identifier      shift and go to state 2
    multiplier      shift and go to state 4
    transpose       shift and go to state 5
    determinant     shift and go to state 6
    inverse         shift and go to state 7
    adjugate        shift and go to state 8
    PRINT           shift and go to state 9
    vector          shift and go to state 11
    comma           shift and go to state 12
    float           shift and go to state 13
    int             shift and go to state 14
    matrix          shift and go to state 15
    lCurlyBracket   shift and go to state 16
    lHardBracket    shift and go to state 17

    expression                     shift and go to state 28
    term                           shift and go to state 3
    factor                         shift and go to state 10

state 10

    (3) term -> factor .

    plus            reduce using rule 3 (term -> factor .)
    minus           reduce using rule 3 (term -> factor .)
    dotProduct      reduce using rule 3 (term -> factor .)
    crossProduct    reduce using rule 3 (term -> factor .)
    $end            reduce using rule 3 (term -> factor .)
    determinant     reduce using rule 3 (term -> factor .)
    rCurlyBracket   reduce using rule 3 (term -> factor .)
    rHardBracket    reduce using rule 3 (term -> factor .)


state 11

    (4) term -> vector .

    plus            reduce using rule 4 (term -> vector .)
    minus           reduce using rule 4 (term -> vector .)
    dotProduct      reduce using rule 4 (term -> vector .)
    crossProduct    reduce using rule 4 (term -> vector .)
    $end            reduce using rule 4 (term -> vector .)
    determinant     reduce using rule 4 (term -> vector .)
    rCurlyBracket   reduce using rule 4 (term -> vector .)
    rHardBracket    reduce using rule 4 (term -> vector .)


state 12

    (5) term -> comma .

    plus            reduce using rule 5 (term -> comma .)
    minus           reduce using rule 5 (term -> comma .)
    dotProduct      reduce using rule 5 (term -> comma .)
    crossProduct    reduce using rule 5 (term -> comma .)
    $end            reduce using rule 5 (term -> comma .)
    determinant     reduce using rule 5 (term -> comma .)
    rCurlyBracket   reduce using rule 5 (term -> comma .)
    rHardBracket    reduce using rule 5 (term -> comma .)


state 13

    (6) term -> float .

    plus            reduce using rule 6 (term -> float .)
    minus           reduce using rule 6 (term -> float .)
    dotProduct      reduce using rule 6 (term -> float .)
    crossProduct    reduce using rule 6 (term -> float .)
    $end            reduce using rule 6 (term -> float .)
    determinant     reduce using rule 6 (term -> float .)
    rCurlyBracket   reduce using rule 6 (term -> float .)
    rHardBracket    reduce using rule 6 (term -> float .)


state 14

    (7) term -> int .

    plus            reduce using rule 7 (term -> int .)
    minus           reduce using rule 7 (term -> int .)
    dotProduct      reduce using rule 7 (term -> int .)
    crossProduct    reduce using rule 7 (term -> int .)
    $end            reduce using rule 7 (term -> int .)
    determinant     reduce using rule 7 (term -> int .)
    rCurlyBracket   reduce using rule 7 (term -> int .)
    rHardBracket    reduce using rule 7 (term -> int .)


state 15

    (8) term -> matrix .

    plus            reduce using rule 8 (term -> matrix .)
    minus           reduce using rule 8 (term -> matrix .)
    dotProduct      reduce using rule 8 (term -> matrix .)
    crossProduct    reduce using rule 8 (term -> matrix .)
    $end            reduce using rule 8 (term -> matrix .)
    determinant     reduce using rule 8 (term -> matrix .)
    rCurlyBracket   reduce using rule 8 (term -> matrix .)
    rHardBracket    reduce using rule 8 (term -> matrix .)


state 16

    (10) factor -> lCurlyBracket . expression rCurlyBracket
    (1) expression -> . identifier EQUALS expression
    (2) expression -> . term
    (12) expression -> . expression plus expression
    (13) expression -> . expression minus expression
    (14) expression -> . expression dotProduct expression
    (15) expression -> . multiplier expression
    (16) expression -> . expression crossProduct expression
    (17) expression -> . transpose expression
    (18) expression -> . determinant expression determinant
    (19) expression -> . inverse expression
    (20) expression -> . adjugate expression
    (22) expression -> . PRINT expression
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (21) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    identifier      shift and go to state 2
    multiplier      shift and go to state 4
    transpose       shift and go to state 5
    determinant     shift and go to state 6
    inverse         shift and go to state 7
    adjugate        shift and go to state 8
    PRINT           shift and go to state 9
    vector          shift and go to state 11
    comma           shift and go to state 12
    float           shift and go to state 13
    int             shift and go to state 14
    matrix          shift and go to state 15
    lCurlyBracket   shift and go to state 16
    lHardBracket    shift and go to state 17

    expression                     shift and go to state 29
    term                           shift and go to state 3
    factor                         shift and go to state 10

state 17

    (11) factor -> lHardBracket . expression rHardBracket
    (1) expression -> . identifier EQUALS expression
    (2) expression -> . term
    (12) expression -> . expression plus expression
    (13) expression -> . expression minus expression
    (14) expression -> . expression dotProduct expression
    (15) expression -> . multiplier expression
    (16) expression -> . expression crossProduct expression
    (17) expression -> . transpose expression
    (18) expression -> . determinant expression determinant
    (19) expression -> . inverse expression
    (20) expression -> . adjugate expression
    (22) expression -> . PRINT expression
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (21) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    identifier      shift and go to state 2
    multiplier      shift and go to state 4
    transpose       shift and go to state 5
    determinant     shift and go to state 6
    inverse         shift and go to state 7
    adjugate        shift and go to state 8
    PRINT           shift and go to state 9
    vector          shift and go to state 11
    comma           shift and go to state 12
    float           shift and go to state 13
    int             shift and go to state 14
    matrix          shift and go to state 15
    lCurlyBracket   shift and go to state 16
    lHardBracket    shift and go to state 17

    expression                     shift and go to state 30
    term                           shift and go to state 3
    factor                         shift and go to state 10

state 18

    (12) expression -> expression plus . expression
    (1) expression -> . identifier EQUALS expression
    (2) expression -> . term
    (12) expression -> . expression plus expression
    (13) expression -> . expression minus expression
    (14) expression -> . expression dotProduct expression
    (15) expression -> . multiplier expression
    (16) expression -> . expression crossProduct expression
    (17) expression -> . transpose expression
    (18) expression -> . determinant expression determinant
    (19) expression -> . inverse expression
    (20) expression -> . adjugate expression
    (22) expression -> . PRINT expression
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (21) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    identifier      shift and go to state 2
    multiplier      shift and go to state 4
    transpose       shift and go to state 5
    determinant     shift and go to state 6
    inverse         shift and go to state 7
    adjugate        shift and go to state 8
    PRINT           shift and go to state 9
    vector          shift and go to state 11
    comma           shift and go to state 12
    float           shift and go to state 13
    int             shift and go to state 14
    matrix          shift and go to state 15
    lCurlyBracket   shift and go to state 16
    lHardBracket    shift and go to state 17

    expression                     shift and go to state 31
    term                           shift and go to state 3
    factor                         shift and go to state 10

state 19

    (13) expression -> expression minus . expression
    (1) expression -> . identifier EQUALS expression
    (2) expression -> . term
    (12) expression -> . expression plus expression
    (13) expression -> . expression minus expression
    (14) expression -> . expression dotProduct expression
    (15) expression -> . multiplier expression
    (16) expression -> . expression crossProduct expression
    (17) expression -> . transpose expression
    (18) expression -> . determinant expression determinant
    (19) expression -> . inverse expression
    (20) expression -> . adjugate expression
    (22) expression -> . PRINT expression
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (21) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    identifier      shift and go to state 2
    multiplier      shift and go to state 4
    transpose       shift and go to state 5
    determinant     shift and go to state 6
    inverse         shift and go to state 7
    adjugate        shift and go to state 8
    PRINT           shift and go to state 9
    vector          shift and go to state 11
    comma           shift and go to state 12
    float           shift and go to state 13
    int             shift and go to state 14
    matrix          shift and go to state 15
    lCurlyBracket   shift and go to state 16
    lHardBracket    shift and go to state 17

    expression                     shift and go to state 32
    term                           shift and go to state 3
    factor                         shift and go to state 10

state 20

    (14) expression -> expression dotProduct . expression
    (1) expression -> . identifier EQUALS expression
    (2) expression -> . term
    (12) expression -> . expression plus expression
    (13) expression -> . expression minus expression
    (14) expression -> . expression dotProduct expression
    (15) expression -> . multiplier expression
    (16) expression -> . expression crossProduct expression
    (17) expression -> . transpose expression
    (18) expression -> . determinant expression determinant
    (19) expression -> . inverse expression
    (20) expression -> . adjugate expression
    (22) expression -> . PRINT expression
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (21) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    identifier      shift and go to state 2
    multiplier      shift and go to state 4
    transpose       shift and go to state 5
    determinant     shift and go to state 6
    inverse         shift and go to state 7
    adjugate        shift and go to state 8
    PRINT           shift and go to state 9
    vector          shift and go to state 11
    comma           shift and go to state 12
    float           shift and go to state 13
    int             shift and go to state 14
    matrix          shift and go to state 15
    lCurlyBracket   shift and go to state 16
    lHardBracket    shift and go to state 17

    expression                     shift and go to state 33
    term                           shift and go to state 3
    factor                         shift and go to state 10

state 21

    (16) expression -> expression crossProduct . expression
    (1) expression -> . identifier EQUALS expression
    (2) expression -> . term
    (12) expression -> . expression plus expression
    (13) expression -> . expression minus expression
    (14) expression -> . expression dotProduct expression
    (15) expression -> . multiplier expression
    (16) expression -> . expression crossProduct expression
    (17) expression -> . transpose expression
    (18) expression -> . determinant expression determinant
    (19) expression -> . inverse expression
    (20) expression -> . adjugate expression
    (22) expression -> . PRINT expression
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (21) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    identifier      shift and go to state 2
    multiplier      shift and go to state 4
    transpose       shift and go to state 5
    determinant     shift and go to state 6
    inverse         shift and go to state 7
    adjugate        shift and go to state 8
    PRINT           shift and go to state 9
    vector          shift and go to state 11
    comma           shift and go to state 12
    float           shift and go to state 13
    int             shift and go to state 14
    matrix          shift and go to state 15
    lCurlyBracket   shift and go to state 16
    lHardBracket    shift and go to state 17

    expression                     shift and go to state 34
    term                           shift and go to state 3
    factor                         shift and go to state 10

state 22

    (1) expression -> identifier EQUALS . expression
    (1) expression -> . identifier EQUALS expression
    (2) expression -> . term
    (12) expression -> . expression plus expression
    (13) expression -> . expression minus expression
    (14) expression -> . expression dotProduct expression
    (15) expression -> . multiplier expression
    (16) expression -> . expression crossProduct expression
    (17) expression -> . transpose expression
    (18) expression -> . determinant expression determinant
    (19) expression -> . inverse expression
    (20) expression -> . adjugate expression
    (22) expression -> . PRINT expression
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (21) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    identifier      shift and go to state 2
    multiplier      shift and go to state 4
    transpose       shift and go to state 5
    determinant     shift and go to state 6
    inverse         shift and go to state 7
    adjugate        shift and go to state 8
    PRINT           shift and go to state 9
    vector          shift and go to state 11
    comma           shift and go to state 12
    float           shift and go to state 13
    int             shift and go to state 14
    matrix          shift and go to state 15
    lCurlyBracket   shift and go to state 16
    lHardBracket    shift and go to state 17

    expression                     shift and go to state 35
    term                           shift and go to state 3
    factor                         shift and go to state 10

state 23

    (15) expression -> multiplier expression .
    (12) expression -> expression . plus expression
    (13) expression -> expression . minus expression
    (14) expression -> expression . dotProduct expression
    (16) expression -> expression . crossProduct expression

    $end            reduce using rule 15 (expression -> multiplier expression .)
    determinant     reduce using rule 15 (expression -> multiplier expression .)
    rCurlyBracket   reduce using rule 15 (expression -> multiplier expression .)
    rHardBracket    reduce using rule 15 (expression -> multiplier expression .)
    plus            shift and go to state 18
    minus           shift and go to state 19
    dotProduct      shift and go to state 20
    crossProduct    shift and go to state 21

  ! plus            [ reduce using rule 15 (expression -> multiplier expression .) ]
  ! minus           [ reduce using rule 15 (expression -> multiplier expression .) ]
  ! dotProduct      [ reduce using rule 15 (expression -> multiplier expression .) ]
  ! crossProduct    [ reduce using rule 15 (expression -> multiplier expression .) ]


state 24

    (17) expression -> transpose expression .
    (12) expression -> expression . plus expression
    (13) expression -> expression . minus expression
    (14) expression -> expression . dotProduct expression
    (16) expression -> expression . crossProduct expression

    crossProduct    reduce using rule 17 (expression -> transpose expression .)
    $end            reduce using rule 17 (expression -> transpose expression .)
    determinant     reduce using rule 17 (expression -> transpose expression .)
    rCurlyBracket   reduce using rule 17 (expression -> transpose expression .)
    rHardBracket    reduce using rule 17 (expression -> transpose expression .)
    plus            shift and go to state 18
    minus           shift and go to state 19
    dotProduct      shift and go to state 20

  ! plus            [ reduce using rule 17 (expression -> transpose expression .) ]
  ! minus           [ reduce using rule 17 (expression -> transpose expression .) ]
  ! dotProduct      [ reduce using rule 17 (expression -> transpose expression .) ]
  ! crossProduct    [ shift and go to state 21 ]


state 25

    (18) expression -> determinant expression . determinant
    (12) expression -> expression . plus expression
    (13) expression -> expression . minus expression
    (14) expression -> expression . dotProduct expression
    (16) expression -> expression . crossProduct expression

    determinant     shift and go to state 36
    plus            shift and go to state 18
    minus           shift and go to state 19
    dotProduct      shift and go to state 20
    crossProduct    shift and go to state 21


state 26

    (19) expression -> inverse expression .
    (12) expression -> expression . plus expression
    (13) expression -> expression . minus expression
    (14) expression -> expression . dotProduct expression
    (16) expression -> expression . crossProduct expression

    crossProduct    reduce using rule 19 (expression -> inverse expression .)
    $end            reduce using rule 19 (expression -> inverse expression .)
    determinant     reduce using rule 19 (expression -> inverse expression .)
    rCurlyBracket   reduce using rule 19 (expression -> inverse expression .)
    rHardBracket    reduce using rule 19 (expression -> inverse expression .)
    plus            shift and go to state 18
    minus           shift and go to state 19
    dotProduct      shift and go to state 20

  ! plus            [ reduce using rule 19 (expression -> inverse expression .) ]
  ! minus           [ reduce using rule 19 (expression -> inverse expression .) ]
  ! dotProduct      [ reduce using rule 19 (expression -> inverse expression .) ]
  ! crossProduct    [ shift and go to state 21 ]


state 27

    (20) expression -> adjugate expression .
    (12) expression -> expression . plus expression
    (13) expression -> expression . minus expression
    (14) expression -> expression . dotProduct expression
    (16) expression -> expression . crossProduct expression

    crossProduct    reduce using rule 20 (expression -> adjugate expression .)
    $end            reduce using rule 20 (expression -> adjugate expression .)
    determinant     reduce using rule 20 (expression -> adjugate expression .)
    rCurlyBracket   reduce using rule 20 (expression -> adjugate expression .)
    rHardBracket    reduce using rule 20 (expression -> adjugate expression .)
    plus            shift and go to state 18
    minus           shift and go to state 19
    dotProduct      shift and go to state 20

  ! plus            [ reduce using rule 20 (expression -> adjugate expression .) ]
  ! minus           [ reduce using rule 20 (expression -> adjugate expression .) ]
  ! dotProduct      [ reduce using rule 20 (expression -> adjugate expression .) ]
  ! crossProduct    [ shift and go to state 21 ]


state 28

    (22) expression -> PRINT expression .
    (12) expression -> expression . plus expression
    (13) expression -> expression . minus expression
    (14) expression -> expression . dotProduct expression
    (16) expression -> expression . crossProduct expression

    $end            reduce using rule 22 (expression -> PRINT expression .)
    determinant     reduce using rule 22 (expression -> PRINT expression .)
    rCurlyBracket   reduce using rule 22 (expression -> PRINT expression .)
    rHardBracket    reduce using rule 22 (expression -> PRINT expression .)
    plus            shift and go to state 18
    minus           shift and go to state 19
    dotProduct      shift and go to state 20
    crossProduct    shift and go to state 21

  ! plus            [ reduce using rule 22 (expression -> PRINT expression .) ]
  ! minus           [ reduce using rule 22 (expression -> PRINT expression .) ]
  ! dotProduct      [ reduce using rule 22 (expression -> PRINT expression .) ]
  ! crossProduct    [ reduce using rule 22 (expression -> PRINT expression .) ]


state 29

    (10) factor -> lCurlyBracket expression . rCurlyBracket
    (12) expression -> expression . plus expression
    (13) expression -> expression . minus expression
    (14) expression -> expression . dotProduct expression
    (16) expression -> expression . crossProduct expression

    rCurlyBracket   shift and go to state 37
    plus            shift and go to state 18
    minus           shift and go to state 19
    dotProduct      shift and go to state 20
    crossProduct    shift and go to state 21


state 30

    (11) factor -> lHardBracket expression . rHardBracket
    (12) expression -> expression . plus expression
    (13) expression -> expression . minus expression
    (14) expression -> expression . dotProduct expression
    (16) expression -> expression . crossProduct expression

    rHardBracket    shift and go to state 38
    plus            shift and go to state 18
    minus           shift and go to state 19
    dotProduct      shift and go to state 20
    crossProduct    shift and go to state 21


state 31

    (12) expression -> expression plus expression .
    (12) expression -> expression . plus expression
    (13) expression -> expression . minus expression
    (14) expression -> expression . dotProduct expression
    (16) expression -> expression . crossProduct expression

    plus            reduce using rule 12 (expression -> expression plus expression .)
    minus           reduce using rule 12 (expression -> expression plus expression .)
    crossProduct    reduce using rule 12 (expression -> expression plus expression .)
    $end            reduce using rule 12 (expression -> expression plus expression .)
    determinant     reduce using rule 12 (expression -> expression plus expression .)
    rCurlyBracket   reduce using rule 12 (expression -> expression plus expression .)
    rHardBracket    reduce using rule 12 (expression -> expression plus expression .)
    dotProduct      shift and go to state 20

  ! dotProduct      [ reduce using rule 12 (expression -> expression plus expression .) ]
  ! plus            [ shift and go to state 18 ]
  ! minus           [ shift and go to state 19 ]
  ! crossProduct    [ shift and go to state 21 ]


state 32

    (13) expression -> expression minus expression .
    (12) expression -> expression . plus expression
    (13) expression -> expression . minus expression
    (14) expression -> expression . dotProduct expression
    (16) expression -> expression . crossProduct expression

    plus            reduce using rule 13 (expression -> expression minus expression .)
    minus           reduce using rule 13 (expression -> expression minus expression .)
    crossProduct    reduce using rule 13 (expression -> expression minus expression .)
    $end            reduce using rule 13 (expression -> expression minus expression .)
    determinant     reduce using rule 13 (expression -> expression minus expression .)
    rCurlyBracket   reduce using rule 13 (expression -> expression minus expression .)
    rHardBracket    reduce using rule 13 (expression -> expression minus expression .)
    dotProduct      shift and go to state 20

  ! dotProduct      [ reduce using rule 13 (expression -> expression minus expression .) ]
  ! plus            [ shift and go to state 18 ]
  ! minus           [ shift and go to state 19 ]
  ! crossProduct    [ shift and go to state 21 ]


state 33

    (14) expression -> expression dotProduct expression .
    (12) expression -> expression . plus expression
    (13) expression -> expression . minus expression
    (14) expression -> expression . dotProduct expression
    (16) expression -> expression . crossProduct expression

    plus            reduce using rule 14 (expression -> expression dotProduct expression .)
    minus           reduce using rule 14 (expression -> expression dotProduct expression .)
    dotProduct      reduce using rule 14 (expression -> expression dotProduct expression .)
    crossProduct    reduce using rule 14 (expression -> expression dotProduct expression .)
    $end            reduce using rule 14 (expression -> expression dotProduct expression .)
    determinant     reduce using rule 14 (expression -> expression dotProduct expression .)
    rCurlyBracket   reduce using rule 14 (expression -> expression dotProduct expression .)
    rHardBracket    reduce using rule 14 (expression -> expression dotProduct expression .)

  ! plus            [ shift and go to state 18 ]
  ! minus           [ shift and go to state 19 ]
  ! dotProduct      [ shift and go to state 20 ]
  ! crossProduct    [ shift and go to state 21 ]


state 34

    (16) expression -> expression crossProduct expression .
    (12) expression -> expression . plus expression
    (13) expression -> expression . minus expression
    (14) expression -> expression . dotProduct expression
    (16) expression -> expression . crossProduct expression

    crossProduct    reduce using rule 16 (expression -> expression crossProduct expression .)
    $end            reduce using rule 16 (expression -> expression crossProduct expression .)
    determinant     reduce using rule 16 (expression -> expression crossProduct expression .)
    rCurlyBracket   reduce using rule 16 (expression -> expression crossProduct expression .)
    rHardBracket    reduce using rule 16 (expression -> expression crossProduct expression .)
    plus            shift and go to state 18
    minus           shift and go to state 19
    dotProduct      shift and go to state 20

  ! plus            [ reduce using rule 16 (expression -> expression crossProduct expression .) ]
  ! minus           [ reduce using rule 16 (expression -> expression crossProduct expression .) ]
  ! dotProduct      [ reduce using rule 16 (expression -> expression crossProduct expression .) ]
  ! crossProduct    [ shift and go to state 21 ]


state 35

    (1) expression -> identifier EQUALS expression .
    (12) expression -> expression . plus expression
    (13) expression -> expression . minus expression
    (14) expression -> expression . dotProduct expression
    (16) expression -> expression . crossProduct expression

    $end            reduce using rule 1 (expression -> identifier EQUALS expression .)
    determinant     reduce using rule 1 (expression -> identifier EQUALS expression .)
    rCurlyBracket   reduce using rule 1 (expression -> identifier EQUALS expression .)
    rHardBracket    reduce using rule 1 (expression -> identifier EQUALS expression .)
    plus            shift and go to state 18
    minus           shift and go to state 19
    dotProduct      shift and go to state 20
    crossProduct    shift and go to state 21

  ! plus            [ reduce using rule 1 (expression -> identifier EQUALS expression .) ]
  ! minus           [ reduce using rule 1 (expression -> identifier EQUALS expression .) ]
  ! dotProduct      [ reduce using rule 1 (expression -> identifier EQUALS expression .) ]
  ! crossProduct    [ reduce using rule 1 (expression -> identifier EQUALS expression .) ]


state 36

    (18) expression -> determinant expression determinant .

    plus            reduce using rule 18 (expression -> determinant expression determinant .)
    minus           reduce using rule 18 (expression -> determinant expression determinant .)
    dotProduct      reduce using rule 18 (expression -> determinant expression determinant .)
    crossProduct    reduce using rule 18 (expression -> determinant expression determinant .)
    $end            reduce using rule 18 (expression -> determinant expression determinant .)
    determinant     reduce using rule 18 (expression -> determinant expression determinant .)
    rCurlyBracket   reduce using rule 18 (expression -> determinant expression determinant .)
    rHardBracket    reduce using rule 18 (expression -> determinant expression determinant .)


state 37

    (10) factor -> lCurlyBracket expression rCurlyBracket .

    plus            reduce using rule 10 (factor -> lCurlyBracket expression rCurlyBracket .)
    minus           reduce using rule 10 (factor -> lCurlyBracket expression rCurlyBracket .)
    dotProduct      reduce using rule 10 (factor -> lCurlyBracket expression rCurlyBracket .)
    crossProduct    reduce using rule 10 (factor -> lCurlyBracket expression rCurlyBracket .)
    $end            reduce using rule 10 (factor -> lCurlyBracket expression rCurlyBracket .)
    determinant     reduce using rule 10 (factor -> lCurlyBracket expression rCurlyBracket .)
    rCurlyBracket   reduce using rule 10 (factor -> lCurlyBracket expression rCurlyBracket .)
    rHardBracket    reduce using rule 10 (factor -> lCurlyBracket expression rCurlyBracket .)


state 38

    (11) factor -> lHardBracket expression rHardBracket .

    plus            reduce using rule 11 (factor -> lHardBracket expression rHardBracket .)
    minus           reduce using rule 11 (factor -> lHardBracket expression rHardBracket .)
    dotProduct      reduce using rule 11 (factor -> lHardBracket expression rHardBracket .)
    crossProduct    reduce using rule 11 (factor -> lHardBracket expression rHardBracket .)
    $end            reduce using rule 11 (factor -> lHardBracket expression rHardBracket .)
    determinant     reduce using rule 11 (factor -> lHardBracket expression rHardBracket .)
    rCurlyBracket   reduce using rule 11 (factor -> lHardBracket expression rHardBracket .)
    rHardBracket    reduce using rule 11 (factor -> lHardBracket expression rHardBracket .)

