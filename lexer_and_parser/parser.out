Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    crossProduct

Grammar

Rule 0     S' -> expression
Rule 1     expression -> identifier EQUALS term
Rule 2     expression -> term
Rule 3     term -> factor
Rule 4     term -> vector
Rule 5     term -> comma
Rule 6     term -> float
Rule 7     term -> int
Rule 8     term -> matrix
Rule 9     term -> multiplier
Rule 10    factor -> lCurlyBracket expression rCurlyBracket
Rule 11    factor -> lHardBracket expression rHardBracket
Rule 12    expression -> expression plus vector
Rule 13    expression -> expression minus vector
Rule 14    expression -> expression plus matrix
Rule 15    expression -> expression minus matrix
Rule 16    expression -> multiplier vector
Rule 17    expression -> multiplier matrix
Rule 18    expression -> matrix matrix
Rule 19    expression -> transpose matrix
Rule 20    expression -> determinant matrix
Rule 21    expression -> expression dotProduct vector
Rule 22    expression -> inverse matrix
Rule 23    expression -> adjugate matrix
Rule 24    term -> identifier

Terminals, with rules where they appear

EQUALS               : 1
adjugate             : 23
comma                : 5
crossProduct         : 
determinant          : 20
dotProduct           : 21
error                : 
float                : 6
identifier           : 1 24
int                  : 7
inverse              : 22
lCurlyBracket        : 10
lHardBracket         : 11
matrix               : 8 14 15 17 18 18 19 20 22 23
minus                : 13 15
multiplier           : 9 16 17
plus                 : 12 14
rCurlyBracket        : 10
rHardBracket         : 11
transpose            : 19
vector               : 4 12 13 16 21

Nonterminals, with rules where they appear

expression           : 10 11 12 13 14 15 21 0
factor               : 3
term                 : 1 2

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . identifier EQUALS term
    (2) expression -> . term
    (12) expression -> . expression plus vector
    (13) expression -> . expression minus vector
    (14) expression -> . expression plus matrix
    (15) expression -> . expression minus matrix
    (16) expression -> . multiplier vector
    (17) expression -> . multiplier matrix
    (18) expression -> . matrix matrix
    (19) expression -> . transpose matrix
    (20) expression -> . determinant matrix
    (21) expression -> . expression dotProduct vector
    (22) expression -> . inverse matrix
    (23) expression -> . adjugate matrix
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (24) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    identifier      shift and go to state 2
    multiplier      shift and go to state 6
    matrix          shift and go to state 5
    transpose       shift and go to state 7
    determinant     shift and go to state 8
    inverse         shift and go to state 9
    adjugate        shift and go to state 10
    vector          shift and go to state 4
    comma           shift and go to state 12
    float           shift and go to state 13
    int             shift and go to state 14
    lCurlyBracket   shift and go to state 15
    lHardBracket    shift and go to state 16

    expression                     shift and go to state 1
    term                           shift and go to state 3
    factor                         shift and go to state 11

state 1

    (0) S' -> expression .
    (12) expression -> expression . plus vector
    (13) expression -> expression . minus vector
    (14) expression -> expression . plus matrix
    (15) expression -> expression . minus matrix
    (21) expression -> expression . dotProduct vector

    plus            shift and go to state 17
    minus           shift and go to state 18
    dotProduct      shift and go to state 19


state 2

    (1) expression -> identifier . EQUALS term
    (24) term -> identifier .

    EQUALS          shift and go to state 20
    plus            reduce using rule 24 (term -> identifier .)
    minus           reduce using rule 24 (term -> identifier .)
    dotProduct      reduce using rule 24 (term -> identifier .)
    $end            reduce using rule 24 (term -> identifier .)
    rCurlyBracket   reduce using rule 24 (term -> identifier .)
    rHardBracket    reduce using rule 24 (term -> identifier .)


state 3

    (2) expression -> term .

    plus            reduce using rule 2 (expression -> term .)
    minus           reduce using rule 2 (expression -> term .)
    dotProduct      reduce using rule 2 (expression -> term .)
    $end            reduce using rule 2 (expression -> term .)
    rCurlyBracket   reduce using rule 2 (expression -> term .)
    rHardBracket    reduce using rule 2 (expression -> term .)


state 4

    (4) term -> vector .

    plus            reduce using rule 4 (term -> vector .)
    minus           reduce using rule 4 (term -> vector .)
    dotProduct      reduce using rule 4 (term -> vector .)
    $end            reduce using rule 4 (term -> vector .)
    rCurlyBracket   reduce using rule 4 (term -> vector .)
    rHardBracket    reduce using rule 4 (term -> vector .)


state 5

    (18) expression -> matrix . matrix
    (8) term -> matrix .

    matrix          shift and go to state 21
    plus            reduce using rule 8 (term -> matrix .)
    minus           reduce using rule 8 (term -> matrix .)
    dotProduct      reduce using rule 8 (term -> matrix .)
    $end            reduce using rule 8 (term -> matrix .)
    rCurlyBracket   reduce using rule 8 (term -> matrix .)
    rHardBracket    reduce using rule 8 (term -> matrix .)


state 6

    (16) expression -> multiplier . vector
    (17) expression -> multiplier . matrix
    (9) term -> multiplier .

    vector          shift and go to state 22
    matrix          shift and go to state 23
    plus            reduce using rule 9 (term -> multiplier .)
    minus           reduce using rule 9 (term -> multiplier .)
    dotProduct      reduce using rule 9 (term -> multiplier .)
    $end            reduce using rule 9 (term -> multiplier .)
    rCurlyBracket   reduce using rule 9 (term -> multiplier .)
    rHardBracket    reduce using rule 9 (term -> multiplier .)


state 7

    (19) expression -> transpose . matrix

    matrix          shift and go to state 24


state 8

    (20) expression -> determinant . matrix

    matrix          shift and go to state 25


state 9

    (22) expression -> inverse . matrix

    matrix          shift and go to state 26


state 10

    (23) expression -> adjugate . matrix

    matrix          shift and go to state 27


state 11

    (3) term -> factor .

    plus            reduce using rule 3 (term -> factor .)
    minus           reduce using rule 3 (term -> factor .)
    dotProduct      reduce using rule 3 (term -> factor .)
    $end            reduce using rule 3 (term -> factor .)
    rCurlyBracket   reduce using rule 3 (term -> factor .)
    rHardBracket    reduce using rule 3 (term -> factor .)


state 12

    (5) term -> comma .

    plus            reduce using rule 5 (term -> comma .)
    minus           reduce using rule 5 (term -> comma .)
    dotProduct      reduce using rule 5 (term -> comma .)
    $end            reduce using rule 5 (term -> comma .)
    rCurlyBracket   reduce using rule 5 (term -> comma .)
    rHardBracket    reduce using rule 5 (term -> comma .)


state 13

    (6) term -> float .

    plus            reduce using rule 6 (term -> float .)
    minus           reduce using rule 6 (term -> float .)
    dotProduct      reduce using rule 6 (term -> float .)
    $end            reduce using rule 6 (term -> float .)
    rCurlyBracket   reduce using rule 6 (term -> float .)
    rHardBracket    reduce using rule 6 (term -> float .)


state 14

    (7) term -> int .

    plus            reduce using rule 7 (term -> int .)
    minus           reduce using rule 7 (term -> int .)
    dotProduct      reduce using rule 7 (term -> int .)
    $end            reduce using rule 7 (term -> int .)
    rCurlyBracket   reduce using rule 7 (term -> int .)
    rHardBracket    reduce using rule 7 (term -> int .)


state 15

    (10) factor -> lCurlyBracket . expression rCurlyBracket
    (1) expression -> . identifier EQUALS term
    (2) expression -> . term
    (12) expression -> . expression plus vector
    (13) expression -> . expression minus vector
    (14) expression -> . expression plus matrix
    (15) expression -> . expression minus matrix
    (16) expression -> . multiplier vector
    (17) expression -> . multiplier matrix
    (18) expression -> . matrix matrix
    (19) expression -> . transpose matrix
    (20) expression -> . determinant matrix
    (21) expression -> . expression dotProduct vector
    (22) expression -> . inverse matrix
    (23) expression -> . adjugate matrix
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (24) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    identifier      shift and go to state 2
    multiplier      shift and go to state 6
    matrix          shift and go to state 5
    transpose       shift and go to state 7
    determinant     shift and go to state 8
    inverse         shift and go to state 9
    adjugate        shift and go to state 10
    vector          shift and go to state 4
    comma           shift and go to state 12
    float           shift and go to state 13
    int             shift and go to state 14
    lCurlyBracket   shift and go to state 15
    lHardBracket    shift and go to state 16

    expression                     shift and go to state 28
    term                           shift and go to state 3
    factor                         shift and go to state 11

state 16

    (11) factor -> lHardBracket . expression rHardBracket
    (1) expression -> . identifier EQUALS term
    (2) expression -> . term
    (12) expression -> . expression plus vector
    (13) expression -> . expression minus vector
    (14) expression -> . expression plus matrix
    (15) expression -> . expression minus matrix
    (16) expression -> . multiplier vector
    (17) expression -> . multiplier matrix
    (18) expression -> . matrix matrix
    (19) expression -> . transpose matrix
    (20) expression -> . determinant matrix
    (21) expression -> . expression dotProduct vector
    (22) expression -> . inverse matrix
    (23) expression -> . adjugate matrix
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (24) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    identifier      shift and go to state 2
    multiplier      shift and go to state 6
    matrix          shift and go to state 5
    transpose       shift and go to state 7
    determinant     shift and go to state 8
    inverse         shift and go to state 9
    adjugate        shift and go to state 10
    vector          shift and go to state 4
    comma           shift and go to state 12
    float           shift and go to state 13
    int             shift and go to state 14
    lCurlyBracket   shift and go to state 15
    lHardBracket    shift and go to state 16

    expression                     shift and go to state 29
    term                           shift and go to state 3
    factor                         shift and go to state 11

state 17

    (12) expression -> expression plus . vector
    (14) expression -> expression plus . matrix

    vector          shift and go to state 30
    matrix          shift and go to state 31


state 18

    (13) expression -> expression minus . vector
    (15) expression -> expression minus . matrix

    vector          shift and go to state 32
    matrix          shift and go to state 33


state 19

    (21) expression -> expression dotProduct . vector

    vector          shift and go to state 34


state 20

    (1) expression -> identifier EQUALS . term
    (3) term -> . factor
    (4) term -> . vector
    (5) term -> . comma
    (6) term -> . float
    (7) term -> . int
    (8) term -> . matrix
    (9) term -> . multiplier
    (24) term -> . identifier
    (10) factor -> . lCurlyBracket expression rCurlyBracket
    (11) factor -> . lHardBracket expression rHardBracket

    vector          shift and go to state 4
    comma           shift and go to state 12
    float           shift and go to state 13
    int             shift and go to state 14
    matrix          shift and go to state 37
    multiplier      shift and go to state 38
    identifier      shift and go to state 35
    lCurlyBracket   shift and go to state 15
    lHardBracket    shift and go to state 16

    term                           shift and go to state 36
    factor                         shift and go to state 11

state 21

    (18) expression -> matrix matrix .

    plus            reduce using rule 18 (expression -> matrix matrix .)
    minus           reduce using rule 18 (expression -> matrix matrix .)
    dotProduct      reduce using rule 18 (expression -> matrix matrix .)
    $end            reduce using rule 18 (expression -> matrix matrix .)
    rCurlyBracket   reduce using rule 18 (expression -> matrix matrix .)
    rHardBracket    reduce using rule 18 (expression -> matrix matrix .)


state 22

    (16) expression -> multiplier vector .

    plus            reduce using rule 16 (expression -> multiplier vector .)
    minus           reduce using rule 16 (expression -> multiplier vector .)
    dotProduct      reduce using rule 16 (expression -> multiplier vector .)
    $end            reduce using rule 16 (expression -> multiplier vector .)
    rCurlyBracket   reduce using rule 16 (expression -> multiplier vector .)
    rHardBracket    reduce using rule 16 (expression -> multiplier vector .)


state 23

    (17) expression -> multiplier matrix .

    plus            reduce using rule 17 (expression -> multiplier matrix .)
    minus           reduce using rule 17 (expression -> multiplier matrix .)
    dotProduct      reduce using rule 17 (expression -> multiplier matrix .)
    $end            reduce using rule 17 (expression -> multiplier matrix .)
    rCurlyBracket   reduce using rule 17 (expression -> multiplier matrix .)
    rHardBracket    reduce using rule 17 (expression -> multiplier matrix .)


state 24

    (19) expression -> transpose matrix .

    plus            reduce using rule 19 (expression -> transpose matrix .)
    minus           reduce using rule 19 (expression -> transpose matrix .)
    dotProduct      reduce using rule 19 (expression -> transpose matrix .)
    $end            reduce using rule 19 (expression -> transpose matrix .)
    rCurlyBracket   reduce using rule 19 (expression -> transpose matrix .)
    rHardBracket    reduce using rule 19 (expression -> transpose matrix .)


state 25

    (20) expression -> determinant matrix .

    plus            reduce using rule 20 (expression -> determinant matrix .)
    minus           reduce using rule 20 (expression -> determinant matrix .)
    dotProduct      reduce using rule 20 (expression -> determinant matrix .)
    $end            reduce using rule 20 (expression -> determinant matrix .)
    rCurlyBracket   reduce using rule 20 (expression -> determinant matrix .)
    rHardBracket    reduce using rule 20 (expression -> determinant matrix .)


state 26

    (22) expression -> inverse matrix .

    plus            reduce using rule 22 (expression -> inverse matrix .)
    minus           reduce using rule 22 (expression -> inverse matrix .)
    dotProduct      reduce using rule 22 (expression -> inverse matrix .)
    $end            reduce using rule 22 (expression -> inverse matrix .)
    rCurlyBracket   reduce using rule 22 (expression -> inverse matrix .)
    rHardBracket    reduce using rule 22 (expression -> inverse matrix .)


state 27

    (23) expression -> adjugate matrix .

    plus            reduce using rule 23 (expression -> adjugate matrix .)
    minus           reduce using rule 23 (expression -> adjugate matrix .)
    dotProduct      reduce using rule 23 (expression -> adjugate matrix .)
    $end            reduce using rule 23 (expression -> adjugate matrix .)
    rCurlyBracket   reduce using rule 23 (expression -> adjugate matrix .)
    rHardBracket    reduce using rule 23 (expression -> adjugate matrix .)


state 28

    (10) factor -> lCurlyBracket expression . rCurlyBracket
    (12) expression -> expression . plus vector
    (13) expression -> expression . minus vector
    (14) expression -> expression . plus matrix
    (15) expression -> expression . minus matrix
    (21) expression -> expression . dotProduct vector

    rCurlyBracket   shift and go to state 39
    plus            shift and go to state 17
    minus           shift and go to state 18
    dotProduct      shift and go to state 19


state 29

    (11) factor -> lHardBracket expression . rHardBracket
    (12) expression -> expression . plus vector
    (13) expression -> expression . minus vector
    (14) expression -> expression . plus matrix
    (15) expression -> expression . minus matrix
    (21) expression -> expression . dotProduct vector

    rHardBracket    shift and go to state 40
    plus            shift and go to state 17
    minus           shift and go to state 18
    dotProduct      shift and go to state 19


state 30

    (12) expression -> expression plus vector .

    plus            reduce using rule 12 (expression -> expression plus vector .)
    minus           reduce using rule 12 (expression -> expression plus vector .)
    dotProduct      reduce using rule 12 (expression -> expression plus vector .)
    $end            reduce using rule 12 (expression -> expression plus vector .)
    rCurlyBracket   reduce using rule 12 (expression -> expression plus vector .)
    rHardBracket    reduce using rule 12 (expression -> expression plus vector .)


state 31

    (14) expression -> expression plus matrix .

    plus            reduce using rule 14 (expression -> expression plus matrix .)
    minus           reduce using rule 14 (expression -> expression plus matrix .)
    dotProduct      reduce using rule 14 (expression -> expression plus matrix .)
    $end            reduce using rule 14 (expression -> expression plus matrix .)
    rCurlyBracket   reduce using rule 14 (expression -> expression plus matrix .)
    rHardBracket    reduce using rule 14 (expression -> expression plus matrix .)


state 32

    (13) expression -> expression minus vector .

    plus            reduce using rule 13 (expression -> expression minus vector .)
    minus           reduce using rule 13 (expression -> expression minus vector .)
    dotProduct      reduce using rule 13 (expression -> expression minus vector .)
    $end            reduce using rule 13 (expression -> expression minus vector .)
    rCurlyBracket   reduce using rule 13 (expression -> expression minus vector .)
    rHardBracket    reduce using rule 13 (expression -> expression minus vector .)


state 33

    (15) expression -> expression minus matrix .

    plus            reduce using rule 15 (expression -> expression minus matrix .)
    minus           reduce using rule 15 (expression -> expression minus matrix .)
    dotProduct      reduce using rule 15 (expression -> expression minus matrix .)
    $end            reduce using rule 15 (expression -> expression minus matrix .)
    rCurlyBracket   reduce using rule 15 (expression -> expression minus matrix .)
    rHardBracket    reduce using rule 15 (expression -> expression minus matrix .)


state 34

    (21) expression -> expression dotProduct vector .

    plus            reduce using rule 21 (expression -> expression dotProduct vector .)
    minus           reduce using rule 21 (expression -> expression dotProduct vector .)
    dotProduct      reduce using rule 21 (expression -> expression dotProduct vector .)
    $end            reduce using rule 21 (expression -> expression dotProduct vector .)
    rCurlyBracket   reduce using rule 21 (expression -> expression dotProduct vector .)
    rHardBracket    reduce using rule 21 (expression -> expression dotProduct vector .)


state 35

    (24) term -> identifier .

    plus            reduce using rule 24 (term -> identifier .)
    minus           reduce using rule 24 (term -> identifier .)
    dotProduct      reduce using rule 24 (term -> identifier .)
    $end            reduce using rule 24 (term -> identifier .)
    rCurlyBracket   reduce using rule 24 (term -> identifier .)
    rHardBracket    reduce using rule 24 (term -> identifier .)


state 36

    (1) expression -> identifier EQUALS term .

    plus            reduce using rule 1 (expression -> identifier EQUALS term .)
    minus           reduce using rule 1 (expression -> identifier EQUALS term .)
    dotProduct      reduce using rule 1 (expression -> identifier EQUALS term .)
    $end            reduce using rule 1 (expression -> identifier EQUALS term .)
    rCurlyBracket   reduce using rule 1 (expression -> identifier EQUALS term .)
    rHardBracket    reduce using rule 1 (expression -> identifier EQUALS term .)


state 37

    (8) term -> matrix .

    plus            reduce using rule 8 (term -> matrix .)
    minus           reduce using rule 8 (term -> matrix .)
    dotProduct      reduce using rule 8 (term -> matrix .)
    $end            reduce using rule 8 (term -> matrix .)
    rCurlyBracket   reduce using rule 8 (term -> matrix .)
    rHardBracket    reduce using rule 8 (term -> matrix .)


state 38

    (9) term -> multiplier .

    plus            reduce using rule 9 (term -> multiplier .)
    minus           reduce using rule 9 (term -> multiplier .)
    dotProduct      reduce using rule 9 (term -> multiplier .)
    $end            reduce using rule 9 (term -> multiplier .)
    rCurlyBracket   reduce using rule 9 (term -> multiplier .)
    rHardBracket    reduce using rule 9 (term -> multiplier .)


state 39

    (10) factor -> lCurlyBracket expression rCurlyBracket .

    plus            reduce using rule 10 (factor -> lCurlyBracket expression rCurlyBracket .)
    minus           reduce using rule 10 (factor -> lCurlyBracket expression rCurlyBracket .)
    dotProduct      reduce using rule 10 (factor -> lCurlyBracket expression rCurlyBracket .)
    $end            reduce using rule 10 (factor -> lCurlyBracket expression rCurlyBracket .)
    rCurlyBracket   reduce using rule 10 (factor -> lCurlyBracket expression rCurlyBracket .)
    rHardBracket    reduce using rule 10 (factor -> lCurlyBracket expression rCurlyBracket .)


state 40

    (11) factor -> lHardBracket expression rHardBracket .

    plus            reduce using rule 11 (factor -> lHardBracket expression rHardBracket .)
    minus           reduce using rule 11 (factor -> lHardBracket expression rHardBracket .)
    dotProduct      reduce using rule 11 (factor -> lHardBracket expression rHardBracket .)
    $end            reduce using rule 11 (factor -> lHardBracket expression rHardBracket .)
    rCurlyBracket   reduce using rule 11 (factor -> lHardBracket expression rHardBracket .)
    rHardBracket    reduce using rule 11 (factor -> lHardBracket expression rHardBracket .)

