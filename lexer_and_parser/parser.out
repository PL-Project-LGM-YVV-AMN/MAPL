Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    crossProduct
    determinant
    dotProduct

Grammar

Rule 0     S' -> expression
Rule 1     expression -> term
Rule 2     term -> factor
Rule 3     term -> vector
Rule 4     term -> comma
Rule 5     term -> float
Rule 6     term -> int
Rule 7     term -> matrix
Rule 8     term -> multiplier
Rule 9     factor -> lCurlyBracket expression rCurlyBracket
Rule 10    factor -> lHardBracket expression rHardBracket
Rule 11    expression -> expression plus vector
Rule 12    expression -> expression minus vector
Rule 13    expression -> expression plus matrix
Rule 14    expression -> expression minus matrix
Rule 15    expression -> multiplier vector
Rule 16    expression -> multiplier matrix
Rule 17    expression -> matrix matrix
Rule 18    expression -> transpose matrix

Terminals, with rules where they appear

comma                : 4
crossProduct         : 
determinant          : 
dotProduct           : 
error                : 
float                : 5
int                  : 6
lCurlyBracket        : 9
lHardBracket         : 10
matrix               : 7 13 14 16 17 17 18
minus                : 12 14
multiplier           : 8 15 16
plus                 : 11 13
rCurlyBracket        : 9
rHardBracket         : 10
transpose            : 18
vector               : 3 11 12 15

Nonterminals, with rules where they appear

expression           : 9 10 11 12 13 14 0
factor               : 2
term                 : 1

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . term
    (11) expression -> . expression plus vector
    (12) expression -> . expression minus vector
    (13) expression -> . expression plus matrix
    (14) expression -> . expression minus matrix
    (15) expression -> . multiplier vector
    (16) expression -> . multiplier matrix
    (17) expression -> . matrix matrix
    (18) expression -> . transpose matrix
    (2) term -> . factor
    (3) term -> . vector
    (4) term -> . comma
    (5) term -> . float
    (6) term -> . int
    (7) term -> . matrix
    (8) term -> . multiplier
    (9) factor -> . lCurlyBracket expression rCurlyBracket
    (10) factor -> . lHardBracket expression rHardBracket

    multiplier      shift and go to state 5
    matrix          shift and go to state 4
    transpose       shift and go to state 6
    vector          shift and go to state 3
    comma           shift and go to state 8
    float           shift and go to state 9
    int             shift and go to state 10
    lCurlyBracket   shift and go to state 11
    lHardBracket    shift and go to state 12

    expression                     shift and go to state 1
    term                           shift and go to state 2
    factor                         shift and go to state 7

state 1

    (0) S' -> expression .
    (11) expression -> expression . plus vector
    (12) expression -> expression . minus vector
    (13) expression -> expression . plus matrix
    (14) expression -> expression . minus matrix

    plus            shift and go to state 13
    minus           shift and go to state 14


state 2

    (1) expression -> term .

    plus            reduce using rule 1 (expression -> term .)
    minus           reduce using rule 1 (expression -> term .)
    $end            reduce using rule 1 (expression -> term .)
    rCurlyBracket   reduce using rule 1 (expression -> term .)
    rHardBracket    reduce using rule 1 (expression -> term .)


state 3

    (3) term -> vector .

    plus            reduce using rule 3 (term -> vector .)
    minus           reduce using rule 3 (term -> vector .)
    $end            reduce using rule 3 (term -> vector .)
    rCurlyBracket   reduce using rule 3 (term -> vector .)
    rHardBracket    reduce using rule 3 (term -> vector .)


state 4

    (17) expression -> matrix . matrix
    (7) term -> matrix .

    matrix          shift and go to state 15
    plus            reduce using rule 7 (term -> matrix .)
    minus           reduce using rule 7 (term -> matrix .)
    $end            reduce using rule 7 (term -> matrix .)
    rCurlyBracket   reduce using rule 7 (term -> matrix .)
    rHardBracket    reduce using rule 7 (term -> matrix .)


state 5

    (15) expression -> multiplier . vector
    (16) expression -> multiplier . matrix
    (8) term -> multiplier .

    vector          shift and go to state 16
    matrix          shift and go to state 17
    plus            reduce using rule 8 (term -> multiplier .)
    minus           reduce using rule 8 (term -> multiplier .)
    $end            reduce using rule 8 (term -> multiplier .)
    rCurlyBracket   reduce using rule 8 (term -> multiplier .)
    rHardBracket    reduce using rule 8 (term -> multiplier .)


state 6

    (18) expression -> transpose . matrix

    matrix          shift and go to state 18


state 7

    (2) term -> factor .

    plus            reduce using rule 2 (term -> factor .)
    minus           reduce using rule 2 (term -> factor .)
    $end            reduce using rule 2 (term -> factor .)
    rCurlyBracket   reduce using rule 2 (term -> factor .)
    rHardBracket    reduce using rule 2 (term -> factor .)


state 8

    (4) term -> comma .

    plus            reduce using rule 4 (term -> comma .)
    minus           reduce using rule 4 (term -> comma .)
    $end            reduce using rule 4 (term -> comma .)
    rCurlyBracket   reduce using rule 4 (term -> comma .)
    rHardBracket    reduce using rule 4 (term -> comma .)


state 9

    (5) term -> float .

    plus            reduce using rule 5 (term -> float .)
    minus           reduce using rule 5 (term -> float .)
    $end            reduce using rule 5 (term -> float .)
    rCurlyBracket   reduce using rule 5 (term -> float .)
    rHardBracket    reduce using rule 5 (term -> float .)


state 10

    (6) term -> int .

    plus            reduce using rule 6 (term -> int .)
    minus           reduce using rule 6 (term -> int .)
    $end            reduce using rule 6 (term -> int .)
    rCurlyBracket   reduce using rule 6 (term -> int .)
    rHardBracket    reduce using rule 6 (term -> int .)


state 11

    (9) factor -> lCurlyBracket . expression rCurlyBracket
    (1) expression -> . term
    (11) expression -> . expression plus vector
    (12) expression -> . expression minus vector
    (13) expression -> . expression plus matrix
    (14) expression -> . expression minus matrix
    (15) expression -> . multiplier vector
    (16) expression -> . multiplier matrix
    (17) expression -> . matrix matrix
    (18) expression -> . transpose matrix
    (2) term -> . factor
    (3) term -> . vector
    (4) term -> . comma
    (5) term -> . float
    (6) term -> . int
    (7) term -> . matrix
    (8) term -> . multiplier
    (9) factor -> . lCurlyBracket expression rCurlyBracket
    (10) factor -> . lHardBracket expression rHardBracket

    multiplier      shift and go to state 5
    matrix          shift and go to state 4
    transpose       shift and go to state 6
    vector          shift and go to state 3
    comma           shift and go to state 8
    float           shift and go to state 9
    int             shift and go to state 10
    lCurlyBracket   shift and go to state 11
    lHardBracket    shift and go to state 12

    expression                     shift and go to state 19
    term                           shift and go to state 2
    factor                         shift and go to state 7

state 12

    (10) factor -> lHardBracket . expression rHardBracket
    (1) expression -> . term
    (11) expression -> . expression plus vector
    (12) expression -> . expression minus vector
    (13) expression -> . expression plus matrix
    (14) expression -> . expression minus matrix
    (15) expression -> . multiplier vector
    (16) expression -> . multiplier matrix
    (17) expression -> . matrix matrix
    (18) expression -> . transpose matrix
    (2) term -> . factor
    (3) term -> . vector
    (4) term -> . comma
    (5) term -> . float
    (6) term -> . int
    (7) term -> . matrix
    (8) term -> . multiplier
    (9) factor -> . lCurlyBracket expression rCurlyBracket
    (10) factor -> . lHardBracket expression rHardBracket

    multiplier      shift and go to state 5
    matrix          shift and go to state 4
    transpose       shift and go to state 6
    vector          shift and go to state 3
    comma           shift and go to state 8
    float           shift and go to state 9
    int             shift and go to state 10
    lCurlyBracket   shift and go to state 11
    lHardBracket    shift and go to state 12

    expression                     shift and go to state 20
    term                           shift and go to state 2
    factor                         shift and go to state 7

state 13

    (11) expression -> expression plus . vector
    (13) expression -> expression plus . matrix

    vector          shift and go to state 21
    matrix          shift and go to state 22


state 14

    (12) expression -> expression minus . vector
    (14) expression -> expression minus . matrix

    vector          shift and go to state 23
    matrix          shift and go to state 24


state 15

    (17) expression -> matrix matrix .

    plus            reduce using rule 17 (expression -> matrix matrix .)
    minus           reduce using rule 17 (expression -> matrix matrix .)
    $end            reduce using rule 17 (expression -> matrix matrix .)
    rCurlyBracket   reduce using rule 17 (expression -> matrix matrix .)
    rHardBracket    reduce using rule 17 (expression -> matrix matrix .)


state 16

    (15) expression -> multiplier vector .

    plus            reduce using rule 15 (expression -> multiplier vector .)
    minus           reduce using rule 15 (expression -> multiplier vector .)
    $end            reduce using rule 15 (expression -> multiplier vector .)
    rCurlyBracket   reduce using rule 15 (expression -> multiplier vector .)
    rHardBracket    reduce using rule 15 (expression -> multiplier vector .)


state 17

    (16) expression -> multiplier matrix .

    plus            reduce using rule 16 (expression -> multiplier matrix .)
    minus           reduce using rule 16 (expression -> multiplier matrix .)
    $end            reduce using rule 16 (expression -> multiplier matrix .)
    rCurlyBracket   reduce using rule 16 (expression -> multiplier matrix .)
    rHardBracket    reduce using rule 16 (expression -> multiplier matrix .)


state 18

    (18) expression -> transpose matrix .

    plus            reduce using rule 18 (expression -> transpose matrix .)
    minus           reduce using rule 18 (expression -> transpose matrix .)
    $end            reduce using rule 18 (expression -> transpose matrix .)
    rCurlyBracket   reduce using rule 18 (expression -> transpose matrix .)
    rHardBracket    reduce using rule 18 (expression -> transpose matrix .)


state 19

    (9) factor -> lCurlyBracket expression . rCurlyBracket
    (11) expression -> expression . plus vector
    (12) expression -> expression . minus vector
    (13) expression -> expression . plus matrix
    (14) expression -> expression . minus matrix

    rCurlyBracket   shift and go to state 25
    plus            shift and go to state 13
    minus           shift and go to state 14


state 20

    (10) factor -> lHardBracket expression . rHardBracket
    (11) expression -> expression . plus vector
    (12) expression -> expression . minus vector
    (13) expression -> expression . plus matrix
    (14) expression -> expression . minus matrix

    rHardBracket    shift and go to state 26
    plus            shift and go to state 13
    minus           shift and go to state 14


state 21

    (11) expression -> expression plus vector .

    plus            reduce using rule 11 (expression -> expression plus vector .)
    minus           reduce using rule 11 (expression -> expression plus vector .)
    $end            reduce using rule 11 (expression -> expression plus vector .)
    rCurlyBracket   reduce using rule 11 (expression -> expression plus vector .)
    rHardBracket    reduce using rule 11 (expression -> expression plus vector .)


state 22

    (13) expression -> expression plus matrix .

    plus            reduce using rule 13 (expression -> expression plus matrix .)
    minus           reduce using rule 13 (expression -> expression plus matrix .)
    $end            reduce using rule 13 (expression -> expression plus matrix .)
    rCurlyBracket   reduce using rule 13 (expression -> expression plus matrix .)
    rHardBracket    reduce using rule 13 (expression -> expression plus matrix .)


state 23

    (12) expression -> expression minus vector .

    plus            reduce using rule 12 (expression -> expression minus vector .)
    minus           reduce using rule 12 (expression -> expression minus vector .)
    $end            reduce using rule 12 (expression -> expression minus vector .)
    rCurlyBracket   reduce using rule 12 (expression -> expression minus vector .)
    rHardBracket    reduce using rule 12 (expression -> expression minus vector .)


state 24

    (14) expression -> expression minus matrix .

    plus            reduce using rule 14 (expression -> expression minus matrix .)
    minus           reduce using rule 14 (expression -> expression minus matrix .)
    $end            reduce using rule 14 (expression -> expression minus matrix .)
    rCurlyBracket   reduce using rule 14 (expression -> expression minus matrix .)
    rHardBracket    reduce using rule 14 (expression -> expression minus matrix .)


state 25

    (9) factor -> lCurlyBracket expression rCurlyBracket .

    plus            reduce using rule 9 (factor -> lCurlyBracket expression rCurlyBracket .)
    minus           reduce using rule 9 (factor -> lCurlyBracket expression rCurlyBracket .)
    $end            reduce using rule 9 (factor -> lCurlyBracket expression rCurlyBracket .)
    rCurlyBracket   reduce using rule 9 (factor -> lCurlyBracket expression rCurlyBracket .)
    rHardBracket    reduce using rule 9 (factor -> lCurlyBracket expression rCurlyBracket .)


state 26

    (10) factor -> lHardBracket expression rHardBracket .

    plus            reduce using rule 10 (factor -> lHardBracket expression rHardBracket .)
    minus           reduce using rule 10 (factor -> lHardBracket expression rHardBracket .)
    $end            reduce using rule 10 (factor -> lHardBracket expression rHardBracket .)
    rCurlyBracket   reduce using rule 10 (factor -> lHardBracket expression rHardBracket .)
    rHardBracket    reduce using rule 10 (factor -> lHardBracket expression rHardBracket .)

