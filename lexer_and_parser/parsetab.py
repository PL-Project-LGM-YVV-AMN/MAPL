
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftmultiplierleftplusminuscomma crossProduct determinant dotProduct float int lCurlyBracket lHardBracket matrix minus multiplier plus rCurlyBracket rHardBracket vectorexpression : termterm : factor\n            | vector\n            | comma\n            | float\n            | int\n            | matrix\n            | multiplierfactor : lCurlyBracket expression rCurlyBracket\n              | lHardBracket expression rHardBracketexpression : expression plus vectorexpression : expression minus vectorexpression : expression plus matrixexpression : expression minus matrixexpression : multiplier vectorexpression : multiplier matrixexpression : matrix matrix'
    
_lr_action_items = {'multiplier':([0,10,11,],[5,5,5,]),'matrix':([0,4,5,10,11,12,13,],[4,14,16,4,4,20,22,]),'vector':([0,5,10,11,12,13,],[3,15,3,3,19,21,]),'comma':([0,10,11,],[7,7,7,]),'float':([0,10,11,],[8,8,8,]),'int':([0,10,11,],[9,9,9,]),'lCurlyBracket':([0,10,11,],[10,10,10,]),'lHardBracket':([0,10,11,],[11,11,11,]),'$end':([1,2,3,4,5,6,7,8,9,14,15,16,19,20,21,22,23,24,],[0,-1,-3,-7,-8,-2,-4,-5,-6,-17,-15,-16,-11,-13,-12,-14,-9,-10,]),'plus':([1,2,3,4,5,6,7,8,9,14,15,16,17,18,19,20,21,22,23,24,],[12,-1,-3,-7,-8,-2,-4,-5,-6,-17,-15,-16,12,12,-11,-13,-12,-14,-9,-10,]),'minus':([1,2,3,4,5,6,7,8,9,14,15,16,17,18,19,20,21,22,23,24,],[13,-1,-3,-7,-8,-2,-4,-5,-6,-17,-15,-16,13,13,-11,-13,-12,-14,-9,-10,]),'rCurlyBracket':([2,3,4,5,6,7,8,9,14,15,16,17,19,20,21,22,23,24,],[-1,-3,-7,-8,-2,-4,-5,-6,-17,-15,-16,23,-11,-13,-12,-14,-9,-10,]),'rHardBracket':([2,3,4,5,6,7,8,9,14,15,16,18,19,20,21,22,23,24,],[-1,-3,-7,-8,-2,-4,-5,-6,-17,-15,-16,24,-11,-13,-12,-14,-9,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,10,11,],[1,17,18,]),'term':([0,10,11,],[2,2,2,]),'factor':([0,10,11,],[6,6,6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> term','expression',1,'p_expression_term','yacc_test.py',16),
  ('term -> factor','term',1,'p_term_vector','yacc_test.py',26),
  ('term -> vector','term',1,'p_term_vector','yacc_test.py',27),
  ('term -> comma','term',1,'p_term_vector','yacc_test.py',28),
  ('term -> float','term',1,'p_term_vector','yacc_test.py',29),
  ('term -> int','term',1,'p_term_vector','yacc_test.py',30),
  ('term -> matrix','term',1,'p_term_vector','yacc_test.py',31),
  ('term -> multiplier','term',1,'p_term_vector','yacc_test.py',32),
  ('factor -> lCurlyBracket expression rCurlyBracket','factor',3,'p_factor','yacc_test.py',36),
  ('factor -> lHardBracket expression rHardBracket','factor',3,'p_factor','yacc_test.py',37),
  ('expression -> expression plus vector','expression',3,'p_expression_plus_vector','yacc_test.py',42),
  ('expression -> expression minus vector','expression',3,'p_expression_minus_vector','yacc_test.py',51),
  ('expression -> expression plus matrix','expression',3,'p_expression_plus_matrix','yacc_test.py',60),
  ('expression -> expression minus matrix','expression',3,'p_expression_minus_matrix','yacc_test.py',66),
  ('expression -> multiplier vector','expression',2,'p_expression_scalar_vector','yacc_test.py',72),
  ('expression -> multiplier matrix','expression',2,'p_expression_scalar_matrix','yacc_test.py',78),
  ('expression -> matrix matrix','expression',2,'p_expression_cross_product_matrix','yacc_test.py',84),
]
