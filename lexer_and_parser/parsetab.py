
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALSleftmultiplierleftplusminusEQUALS adjugate comma crossProduct determinant dotProduct float identifier int inverse lCurlyBracket lHardBracket matrix minus multiplier plus rCurlyBracket rHardBracket transpose vectorexpression : identifier EQUALS termexpression : termterm : factor\n            | vector\n            | comma\n            | float\n            | int\n            | matrix\n            | multiplierfactor : lCurlyBracket expression rCurlyBracket\n              | lHardBracket expression rHardBracketexpression : expression plus vectorexpression : expression minus vectorexpression : expression plus matrixexpression : expression minus matrixexpression : multiplier vectorexpression : multiplier matrixexpression : matrix matrixexpression : transpose matrixexpression : determinant matrixexpression : expression dotProduct vectorexpression : inverse matrixexpression : adjugate matrixterm : identifier'
    
_lr_action_items = {'identifier':([0,15,16,20,],[2,2,2,35,]),'multiplier':([0,15,16,20,],[6,6,6,38,]),'matrix':([0,5,6,7,8,9,10,15,16,17,18,20,],[5,21,23,24,25,26,27,5,5,31,33,37,]),'transpose':([0,15,16,],[7,7,7,]),'determinant':([0,15,16,],[8,8,8,]),'inverse':([0,15,16,],[9,9,9,]),'adjugate':([0,15,16,],[10,10,10,]),'vector':([0,6,15,16,17,18,19,20,],[4,22,4,4,30,32,34,4,]),'comma':([0,15,16,20,],[12,12,12,12,]),'float':([0,15,16,20,],[13,13,13,13,]),'int':([0,15,16,20,],[14,14,14,14,]),'lCurlyBracket':([0,15,16,20,],[15,15,15,15,]),'lHardBracket':([0,15,16,20,],[16,16,16,16,]),'$end':([1,2,3,4,5,6,11,12,13,14,21,22,23,24,25,26,27,30,31,32,33,34,35,36,37,38,39,40,],[0,-24,-2,-4,-8,-9,-3,-5,-6,-7,-18,-16,-17,-19,-20,-22,-23,-12,-14,-13,-15,-21,-24,-1,-8,-9,-10,-11,]),'plus':([1,2,3,4,5,6,11,12,13,14,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,],[17,-24,-2,-4,-8,-9,-3,-5,-6,-7,-18,-16,-17,-19,-20,-22,-23,17,17,-12,-14,-13,-15,-21,-24,-1,-8,-9,-10,-11,]),'minus':([1,2,3,4,5,6,11,12,13,14,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,],[18,-24,-2,-4,-8,-9,-3,-5,-6,-7,-18,-16,-17,-19,-20,-22,-23,18,18,-12,-14,-13,-15,-21,-24,-1,-8,-9,-10,-11,]),'dotProduct':([1,2,3,4,5,6,11,12,13,14,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,],[19,-24,-2,-4,-8,-9,-3,-5,-6,-7,-18,-16,-17,-19,-20,-22,-23,19,19,-12,-14,-13,-15,-21,-24,-1,-8,-9,-10,-11,]),'EQUALS':([2,],[20,]),'rCurlyBracket':([2,3,4,5,6,11,12,13,14,21,22,23,24,25,26,27,28,30,31,32,33,34,35,36,37,38,39,40,],[-24,-2,-4,-8,-9,-3,-5,-6,-7,-18,-16,-17,-19,-20,-22,-23,39,-12,-14,-13,-15,-21,-24,-1,-8,-9,-10,-11,]),'rHardBracket':([2,3,4,5,6,11,12,13,14,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,],[-24,-2,-4,-8,-9,-3,-5,-6,-7,-18,-16,-17,-19,-20,-22,-23,40,-12,-14,-13,-15,-21,-24,-1,-8,-9,-10,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,15,16,],[1,28,29,]),'term':([0,15,16,20,],[3,3,3,36,]),'factor':([0,15,16,20,],[11,11,11,11,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> identifier EQUALS term','expression',3,'p_assignment','yacc_test.py',19),
  ('expression -> term','expression',1,'p_expression_term','yacc_test.py',23),
  ('term -> factor','term',1,'p_term_vector','yacc_test.py',32),
  ('term -> vector','term',1,'p_term_vector','yacc_test.py',33),
  ('term -> comma','term',1,'p_term_vector','yacc_test.py',34),
  ('term -> float','term',1,'p_term_vector','yacc_test.py',35),
  ('term -> int','term',1,'p_term_vector','yacc_test.py',36),
  ('term -> matrix','term',1,'p_term_vector','yacc_test.py',37),
  ('term -> multiplier','term',1,'p_term_vector','yacc_test.py',38),
  ('factor -> lCurlyBracket expression rCurlyBracket','factor',3,'p_factor','yacc_test.py',42),
  ('factor -> lHardBracket expression rHardBracket','factor',3,'p_factor','yacc_test.py',43),
  ('expression -> expression plus vector','expression',3,'p_expression_plus_vector','yacc_test.py',48),
  ('expression -> expression minus vector','expression',3,'p_expression_minus_vector','yacc_test.py',57),
  ('expression -> expression plus matrix','expression',3,'p_expression_plus_matrix','yacc_test.py',66),
  ('expression -> expression minus matrix','expression',3,'p_expression_minus_matrix','yacc_test.py',72),
  ('expression -> multiplier vector','expression',2,'p_expression_scalar_vector','yacc_test.py',78),
  ('expression -> multiplier matrix','expression',2,'p_expression_scalar_matrix','yacc_test.py',84),
  ('expression -> matrix matrix','expression',2,'p_expression_cross_product_matrix','yacc_test.py',90),
  ('expression -> transpose matrix','expression',2,'p_expression_transpose_matrix','yacc_test.py',96),
  ('expression -> determinant matrix','expression',2,'p_expression_det_matrix','yacc_test.py',100),
  ('expression -> expression dotProduct vector','expression',3,'p_expression_dot_product_vector','yacc_test.py',104),
  ('expression -> inverse matrix','expression',2,'p_expression_inverse_matrix','yacc_test.py',112),
  ('expression -> adjugate matrix','expression',2,'p_expression_adjugate_matrix','yacc_test.py',116),
  ('term -> identifier','term',1,'p_term_name','yacc_test.py',120),
]
